import leon.real._
import RealOps._
import annotations._

object HarmonicOscillator {

  //@loopbound(10)
  def euler(x: Real, v: Real): (Real, Real) = {
    require(-10.0 <= x && x <= 10.0 && -10.0 <= v && v <= 10.0)
    
    val x1 = (x + (0.1 * v))
    val v1 = (v - (0.22999999999999998 * x))
    val x2 = (x1 + (0.1 * v1))
    val v2 = (v1 - (0.22999999999999998 * x1))
    val x3 = (x2 + (0.1 * v2))
    val v3 = (v2 - (0.22999999999999998 * x2))
    val x4 = (x3 + (0.1 * v3))
    val v4 = (v3 - (0.22999999999999998 * x3))
    val x5 = (x4 + (0.1 * v4))
    val v5 = (v4 - (0.22999999999999998 * x4))
    val x6 = (x5 + (0.1 * v5))
    val v6 = (v5 - (0.22999999999999998 * x5))
    val x7 = (x6 + (0.1 * v6))
    val v7 = (v6 - (0.22999999999999998 * x6))
    val x8 = (x7 + (0.1 * v7))
    val v8 = (v7 - (0.22999999999999998 * x7))
    val x9 = (x8 + (0.1 * v8))
    val v9 = (v8 - (0.22999999999999998 * x8))
    ((x9 + (0.1 * v9)), (v9 - (0.22999999999999998 * x9)))

  } ensuring (_ match {
    case (a, b) => -10 <= a && a <= 10 && -10 <= b && b <= 10   
  })

  //@loopbound(10)
  def rk2Rec(x: Real, v: Real): (Real, Real) = {
    require(-10.0 <= x && x <= 10.0 && -10.0 <= v && v <= 10.0) 

    val x1 = (x + (0.1 * (v + ((((-2.3) * x) * 0.1) / 2.))))
    val v1 = (v + ((0.1 * (-2.3)) * (x + ((v * 0.1) / 2.))))
    val x2 = (x1 + (0.1 * (v1 + ((((-2.3) * x1) * 0.1) / 2.))))
    val v2 = (v1 + ((0.1 * (-2.3)) * (x1 + ((v1 * 0.1) / 2.))))
    val x3 = (x2 + (0.1 * (v2 + ((((-2.3) * x2) * 0.1) / 2.))))
    val v3 = (v2 + ((0.1 * (-2.3)) * (x2 + ((v2 * 0.1) / 2.))))
    val x4 = (x3 + (0.1 * (v3 + ((((-2.3) * x3) * 0.1) / 2.))))
    val v4 = (v3 + ((0.1 * (-2.3)) * (x3 + ((v3 * 0.1) / 2.))))
    val x5 = (x4 + (0.1 * (v4 + ((((-2.3) * x4) * 0.1) / 2.))))
    val v5 = (v4 + ((0.1 * (-2.3)) * (x4 + ((v4 * 0.1) / 2.))))
    val x6 = (x5 + (0.1 * (v5 + ((((-2.3) * x5) * 0.1) / 2.))))
    val v6 = (v5 + ((0.1 * (-2.3)) * (x5 + ((v5 * 0.1) / 2.))))
    val x7 = (x6 + (0.1 * (v6 + ((((-2.3) * x6) * 0.1) / 2.))))
    val v7 = (v6 + ((0.1 * (-2.3)) * (x6 + ((v6 * 0.1) / 2.))))
    val x8 = (x7 + (0.1 * (v7 + ((((-2.3) * x7) * 0.1) / 2.))))
    val v8 = (v7 + ((0.1 * (-2.3)) * (x7 + ((v7 * 0.1) / 2.))))
    val x9 = (x8 + (0.1 * (v8 + ((((-2.3) * x8) * 0.1) / 2.))))
    val v9 = (v8 + ((0.1 * (-2.3)) * (x8 + ((v8 * 0.1) / 2.))))
    ((x9 + (0.1 * (v9 + ((((-2.3) * x9) * 0.1) / 2.)))), 
      (v9 + ((0.1 * (-2.3)) * (x9 + ((v9 * 0.1) / 2.)))))

  } ensuring (_ match {
    case (a, b) => -10 <= a && a <= 10 && -10 <= b && b <= 10   
  }) 

  //@loopbound(10)
  def rk4Rec(x: Real, v: Real): (Real, Real) = {
    require(-10.0 <= x && x <= 10.0 && -10.0 <= v && v <= 10.0)
 
    val x1 = (x + ((0.1 * (((v + (2. * (v - (((2.3 * 0.1) * x) / 2.)))) +
      (2. * ((v - (((2.3 * 0.1) * x) / 2.)) - ((((0.1 * 0.1) * 2.3) * v) / 4.)))) +
       (((v - ((2.3 * 0.1) * x)) - ((((2.3 * 0.1) * 0.1) * v) / 2.)) + 
        ((((((2.3 * 2.3) * 0.1) * 0.1) * 0.1) * x) / 4.)))) / 6.))
    val v1 = (v + ((0.1 * (((((-2.3) * x) + (2. * (((-2.3) * x) - (((0.1 * 2.3) * v) / 2.)))) + 
      (2. * ((((-2.3) * x) - (((2.3 * 0.1) * v) / 2.)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x) / 4.)))) + 
    (((((-2.3) * x) - ((2.3 * 0.1) * v)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x) / 2.)) + 
      ((((((0.1 * 0.1) * 0.1) * 2.3) * 2.3) * v) / 4.)))) / 6.))
    val x2 = (x1 + ((0.1 * (((v1 + (2. * (v1 - (((2.3 * 0.1) * x1) / 2.)))) + 
      (2. * ((v1 - (((2.3 * 0.1) * x1) / 2.)) - ((((0.1 * 0.1) * 2.3) * v1) / 4.)))) + 
    (((v1 - ((2.3 * 0.1) * x1)) - ((((2.3 * 0.1) * 0.1) * v1) / 2.)) + 
      ((((((2.3 * 2.3) * 0.1) * 0.1) * 0.1) * x1) / 4.)))) / 6.))
    val v2 = (v1 + ((0.1 * (((((-2.3) * x1) + (2. * (((-2.3) * x1) - (((0.1 * 2.3) * v1) / 2.)))) + 
      (2. * ((((-2.3) * x1) - (((2.3 * 0.1) * v1) / 2.)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x1) / 4.)))) + 
    (((((-2.3) * x1) - ((2.3 * 0.1) * v1)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x1) / 2.)) + 
      ((((((0.1 * 0.1) * 0.1) * 2.3) * 2.3) * v1) / 4.)))) / 6.))
    val x3 = (x2 + ((0.1 * (((v2 + (2. * (v2 - (((2.3 * 0.1) * x2) / 2.)))) + 
      (2. * ((v2 - (((2.3 * 0.1) * x2) / 2.)) - ((((0.1 * 0.1) * 2.3) * v2) / 4.)))) + 
    (((v2 - ((2.3 * 0.1) * x2)) - ((((2.3 * 0.1) * 0.1) * v2) / 2.)) + 
      ((((((2.3 * 2.3) * 0.1) * 0.1) * 0.1) * x2) / 4.)))) / 6.))
    val v3 = (v2 + ((0.1 * (((((-2.3) * x2) + (2. * (((-2.3) * x2) - (((0.1 * 2.3) * v2) / 2.)))) + 
      (2. * ((((-2.3) * x2) - (((2.3 * 0.1) * v2) / 2.)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x2) / 4.)))) + 
    (((((-2.3) * x2) - ((2.3 * 0.1) * v2)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x2) / 2.)) + 
      ((((((0.1 * 0.1) * 0.1) * 2.3) * 2.3) * v2) / 4.)))) / 6.))
    val x4 = (x3 + ((0.1 * (((v3 + (2. * (v3 - (((2.3 * 0.1) * x3) / 2.)))) + 
      (2. * ((v3 - (((2.3 * 0.1) * x3) / 2.)) - ((((0.1 * 0.1) * 2.3) * v3) / 4.)))) + 
    (((v3 - ((2.3 * 0.1) * x3)) - ((((2.3 * 0.1) * 0.1) * v3) / 2.)) + 
      ((((((2.3 * 2.3) * 0.1) * 0.1) * 0.1) * x3) / 4.)))) / 6.))
    val v4 = (v3 + ((0.1 * (((((-2.3) * x3) + (2. * (((-2.3) * x3) - (((0.1 * 2.3) * v3) / 2.)))) + 
      (2. * ((((-2.3) * x3) - (((2.3 * 0.1) * v3) / 2.)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x3) / 4.)))) + 
    (((((-2.3) * x3) - ((2.3 * 0.1) * v3)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x3) / 2.)) + 
      ((((((0.1 * 0.1) * 0.1) * 2.3) * 2.3) * v3) / 4.)))) / 6.))
    val x5 = (x4 + ((0.1 * (((v4 + (2. * (v4 - (((2.3 * 0.1) * x4) / 2.)))) + 
      (2. * ((v4 - (((2.3 * 0.1) * x4) / 2.)) - ((((0.1 * 0.1) * 2.3) * v4) / 4.)))) + 
    (((v4 - ((2.3 * 0.1) * x4)) - ((((2.3 * 0.1) * 0.1) * v4) / 2.)) + 
      ((((((2.3 * 2.3) * 0.1) * 0.1) * 0.1) * x4) / 4.)))) / 6.))
    val v5 = (v4 + ((0.1 * (((((-2.3) * x4) + (2. * (((-2.3) * x4) - (((0.1 * 2.3) * v4) / 2.)))) + 
      (2. * ((((-2.3) * x4) - (((2.3 * 0.1) * v4) / 2.)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x4) / 4.)))) + 
    (((((-2.3) * x4) - ((2.3 * 0.1) * v4)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x4) / 2.)) + 
      ((((((0.1 * 0.1) * 0.1) * 2.3) * 2.3) * v4) / 4.)))) / 6.))
    val x6 = (x5 + ((0.1 * (((v5 + (2. * (v5 - (((2.3 * 0.1) * x5) / 2.)))) + 
      (2. * ((v5 - (((2.3 * 0.1) * x5) / 2.)) - ((((0.1 * 0.1) * 2.3) * v5) / 4.)))) + 
    (((v5 - ((2.3 * 0.1) * x5)) - ((((2.3 * 0.1) * 0.1) * v5) / 2.)) + 
      ((((((2.3 * 2.3) * 0.1) * 0.1) * 0.1) * x5) / 4.)))) / 6.))
    val v6 = (v5 + ((0.1 * (((((-2.3) * x5) + (2. * (((-2.3) * x5) - (((0.1 * 2.3) * v5) / 2.)))) + 
      (2. * ((((-2.3) * x5) - (((2.3 * 0.1) * v5) / 2.)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x5) / 4.)))) + 
    (((((-2.3) * x5) - ((2.3 * 0.1) * v5)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x5) / 2.)) + 
      ((((((0.1 * 0.1) * 0.1) * 2.3) * 2.3) * v5) / 4.)))) / 6.))
    val x7 = (x6 + ((0.1 * (((v6 + (2. * (v6 - (((2.3 * 0.1) * x6) / 2.)))) + 
      (2. * ((v6 - (((2.3 * 0.1) * x6) / 2.)) - ((((0.1 * 0.1) * 2.3) * v6) / 4.)))) + 
    (((v6 - ((2.3 * 0.1) * x6)) - ((((2.3 * 0.1) * 0.1) * v6) / 2.)) + 
      ((((((2.3 * 2.3) * 0.1) * 0.1) * 0.1) * x6) / 4.)))) / 6.))
    val v7 = (v6 + ((0.1 * (((((-2.3) * x6) + (2. * (((-2.3) * x6) - (((0.1 * 2.3) * v6) / 2.)))) + 
      (2. * ((((-2.3) * x6) - (((2.3 * 0.1) * v6) / 2.)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x6) / 4.)))) + 
    (((((-2.3) * x6) - ((2.3 * 0.1) * v6)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x6) / 2.)) + 
      ((((((0.1 * 0.1) * 0.1) * 2.3) * 2.3) * v6) / 4.)))) / 6.))
    val x8 = (x7 + ((0.1 * (((v7 + (2. * (v7 - (((2.3 * 0.1) * x7) / 2.)))) + 
      (2. * ((v7 - (((2.3 * 0.1) * x7) / 2.)) - ((((0.1 * 0.1) * 2.3) * v7) / 4.)))) + 
    (((v7 - ((2.3 * 0.1) * x7)) - ((((2.3 * 0.1) * 0.1) * v7) / 2.)) + 
      ((((((2.3 * 2.3) * 0.1) * 0.1) * 0.1) * x7) / 4.)))) / 6.))
    val v8 = (v7 + ((0.1 * (((((-2.3) * x7) + (2. * (((-2.3) * x7) - (((0.1 * 2.3) * v7) / 2.)))) + 
      (2. * ((((-2.3) * x7) - (((2.3 * 0.1) * v7) / 2.)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x7) / 4.)))) + 
    (((((-2.3) * x7) - ((2.3 * 0.1) * v7)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x7) / 2.)) + 
      ((((((0.1 * 0.1) * 0.1) * 2.3) * 2.3) * v7) / 4.)))) / 6.))
    val x9 = (x8 + ((0.1 * (((v8 + (2. * (v8 - (((2.3 * 0.1) * x8) / 2.)))) + 
      (2. * ((v8 - (((2.3 * 0.1) * x8) / 2.)) - ((((0.1 * 0.1) * 2.3) * v8) / 4.)))) + 
    (((v8 - ((2.3 * 0.1) * x8)) - ((((2.3 * 0.1) * 0.1) * v8) / 2.)) + 
      ((((((2.3 * 2.3) * 0.1) * 0.1) * 0.1) * x8) / 4.)))) / 6.))
    val v9 = (v8 + ((0.1 * (((((-2.3) * x8) + (2. * (((-2.3) * x8) - (((0.1 * 2.3) * v8) / 2.)))) + 
      (2. * ((((-2.3) * x8) - (((2.3 * 0.1) * v8) / 2.)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x8) / 4.)))) + 
    (((((-2.3) * x8) - ((2.3 * 0.1) * v8)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x8) / 2.)) + 
      ((((((0.1 * 0.1) * 0.1) * 2.3) * 2.3) * v8) / 4.)))) / 6.))
    

    ((x9 + ((0.1 * (((v9 + (2. * (v9 - (((2.3 * 0.1) * x9) / 2.)))) +
     (2. * ((v9 - (((2.3 * 0.1) * x9) / 2.)) - ((((0.1 * 0.1) * 2.3) * v9) / 4.)))) + 
      (((v9 - ((2.3 * 0.1) * x9)) - ((((2.3 * 0.1) * 0.1) * v9) / 2.)) + ((((((2.3 * 2.3) * 0.1) * 0.1) * 0.1) * x9) / 4.)))) / 6.)),

       (v9 + ((0.1 * (((((-2.3) * x9) + (2. * (((-2.3) * x9) - (((0.1 * 2.3) * v9) / 2.)))) + (2. * ((((-2.3) * x9) - 
        (((2.3 * 0.1) * v9) / 2.)) + (((((2.3 * 2.3) * 0.1) * 0.1) * x9) / 4.)))) + (((((-2.3) * x9) - ((2.3 * 0.1) * v9)) + 
       (((((2.3 * 2.3) * 0.1) * 0.1) * x9) / 2.)) + ((((((0.1 * 0.1) * 0.1) * 2.3) * 2.3) * v9) / 4.)))) / 6.)))


  } ensuring (_ match {
    case (a, b) => -10 <= a && a <= 10 && -10 <= b && b <= 10   
  })
}