val approximations = List(ApproxKind(Uninterpreted, Merging, Z3Only), 
                                  ApproxKind(Inlining, Merging, JustFloat))


ArithmeticOnly:
                                [info] Running leon.Main --real testcases/real-testcases/unit-tests/ArithmeticOnly.scala
[info] [ Info  ] Running Compilation phase
[info] options: simulation: false,
[info] z3 timeout: 1000,
[info] precision: List(leon.real.package$Float64$@1a124026),
[info] z3Only: false,
[info] pathSensitive: false
[info] [ Info  ] Analysing fnc:  f1_noNoise
[info] (((x * (sqrt(x) - y)) / x) + ((-x) * 2.1))
[info] parameters: Map(x -> x = #x (2.2, 2.3) +/-  -- , y -> y = #y (3.5, 7.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] [ Info  ] Analysing fnc:  xinvalidIntervalComparisons
[info] (x + y)
[info] parameters: Map(x -> x = #x (-2.2, -2.3) +/-  -- , y -> y = #y (3.5, 7.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] [Warning] Incomplete precondition! Skipping...
[info] [ Info  ] Analysing fnc:  f1_actual
[info] (((x * (sqrt(x) - y)) / x) + (-x))
[info] parameters: Map(x -> x = #x (2.2, 2.3) +/- 1.000000000000000e-05, y -> y = #y (3.5, 7.5) +/- 1.000000000000000e-07, #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] [ Info  ] Analysing fnc:  f2_simple
[info] (x * x)
[info] parameters: Map(x -> x = #x (1, 2) +/- 1.000000000000000e-05, #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-05))
[info] [ Info  ] Analysing fnc:  f1_withNoise
[info] (((x * (sqrt(x) - y)) / x) + (-x))
[info] parameters: Map(x -> x = #x (2.2, 2.3) +/- 1.000000000000000e-05, y -> y = #y (3.5, 7.5) +/- 1.000000000000000e-07, #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] [ Info  ] Analysing fnc:  f2_cnstr
[info] (((x * (sqrt(x) - y)) / x) + (-x))
[info] parameters: Map(x -> x = #x (2, 3.5) +/-  -- , y -> y = #y (2, 3.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: ((2 ≤ x) ∧ (x ≤ 3.5) ∧ (2 ≤ y) ∧ (y ≤ 3.5) ∧ ((3 * x) ≥ y) ∧ rndoof(x) ∧ rndoof(y))
[info] [ Info  ] Analysing fnc:  xunBounded2
[info] (x + y)
[info] parameters: Map(x -> x = #x (-2.2, 2.3) +/-  -- , y -> y = #y ( -- , 3.3) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] [Warning] Incomplete precondition! Skipping...
[info] [ Info  ] Analysing fnc:  ints
[info] ((x * x) + 7)
[info] parameters: Map(x -> x = #x (-2.2, 2.3) +/-  -- , y -> y = #y (3.5, 7.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] [ Info  ] Analysing fnc:  f2_noNoise
[info] (((x * (sqrt(x) - y)) / x) + (-x))
[info] parameters: Map(x -> x = #x (2.2, 2.3) +/-  -- , y -> y = #y (3.5, 7.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ rndoof(x) ∧ rndoof(y))
[info] [ Info  ] Analysing fnc:  f1_simple
[info] (x * x)
[info] parameters: Map(x -> x = #x (1, 2) +/- 1.000000000000000e-09, #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-09))
[info] [ Info  ] Analysing fnc:  f2_actual
[info] (((x * (sqrt(x) - y)) / x) + (-x))
[info] parameters: Map(x -> x = #x (2.2, 2.3) +/- 1.000000000000000e-05, y -> y = #y (3.5, 7.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y))
[info] [ Info  ] Analysing fnc:  xunBounded
[info] (x + y)
[info] parameters: Map(x -> x = #x (-2.2, 2.3) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] [Warning] Incomplete precondition! Skipping...
[info] [ Info  ] Analysing fnc:  f1_cnstr
[info] (((x * (sqrt(x) - y)) / x) + (-x))
[info] parameters: Map(x -> x = #x (2, 3.5) +/-  -- , y -> y = #y (2, 3.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [2,3.5] ∧ y ∈ [2,3.5] ∧ (x ≤ y) ∧ rndoof(x) ∧ rndoof(y))
[info] [ Info  ] Analysing fnc:  f2_withNoise
[info] (((x * (sqrt(x) - y)) / x) + (-x))
[info] parameters: Map(x -> x = #x (2.2, 2.3) +/- 1.000000000000000e-05, y -> y = #y (3.5, 7.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y))
[info] [ Info  ] ******** precision: leon.real.package$Float64$@1a124026 *************
[info] [ Info  ] Verification condition (postcond.) ==== f2_withNoise ====
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: true
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: true
[info] 
[info] after PATH handling:
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: true
[info] 
[info] approx: List(((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x))) ∧ false))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_1) ∧ (#delta_1 ≤ #eps) ∧ ((#sqrt1 ^ 2) == x) ∧ (0 ≤ #sqrt1) ∧ (-(#eps) ≤ #delta_2) ∧ (#delta_2 ≤ #eps) ∧ (-(#eps) ≤ #delta_3) ∧ (#delta_3 ≤ #eps) ∧ (-(#eps) ≤ #delta_4) ∧ (#delta_4 ≤ #eps) ∧ (-(#eps) ≤ #delta_5) ∧ (#delta_5 ≤ #eps) ∧ (-(#eps) ≤ #delta_6) ∧ (#delta_6 ≤ #eps) ∧ ((#sqrt2 ^ 2) == #x) ∧ (0 ≤ #sqrt2) ∧ (#eps == 1.110223024625157e-16) ∧ (2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ (#x == (x + #err_1)) ∧ (-1.000000000000000e-05 ≤ #err_1) ∧ (#err_1 ≤ 1.000000000000000e-05) ∧ (#y == (y + (y * #delta_1))) ∧ (#res == ((((x * #sqrt1) - (y * x)) / x) + (-x))) ∧ (#fres == ((((((1 + #delta_4) * ((((#x * #sqrt2) * (1 + #delta_6)) * (1 + #delta_5)) - ((#x * #y) * (1 + #delta_5)))) / #x) * (1 + #delta_3)) * (1 + #delta_2)) + ((-#x) * (1 + #delta_2)))) ∧ false)
[info] [ Info  ] ==== VALID ====
[info] generated spec: None
[info] [ Info  ] Verification condition (postcond.) ==== f1_cnstr ====
[info] pre: (x ∈ [2,3.5] ∧ y ∈ [2,3.5] ∧ (x ≤ y) ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: (#res ≥ 0)
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [2,3.5] ∧ y ∈ [2,3.5] ∧ (x ≤ y) ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: (#res ≥ 0)
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [2,3.5] ∧ y ∈ [2,3.5] ∧ (x ≤ y) ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: (#res ≥ 0)
[info] 
[info] approx: List((x ∈ [2,3.5] ∧ y ∈ [2,3.5] ∧ (x ≤ y) ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x))) ∧ (#res < 0)))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_13) ∧ (#delta_13 ≤ #eps) ∧ (-(#eps) ≤ #delta_14) ∧ (#delta_14 ≤ #eps) ∧ ((#sqrt5 ^ 2) == x) ∧ (0 ≤ #sqrt5) ∧ (-(#eps) ≤ #delta_15) ∧ (#delta_15 ≤ #eps) ∧ (-(#eps) ≤ #delta_16) ∧ (#delta_16 ≤ #eps) ∧ (-(#eps) ≤ #delta_17) ∧ (#delta_17 ≤ #eps) ∧ (-(#eps) ≤ #delta_18) ∧ (#delta_18 ≤ #eps) ∧ (-(#eps) ≤ #delta_19) ∧ (#delta_19 ≤ #eps) ∧ ((#sqrt6 ^ 2) == #x) ∧ (0 ≤ #sqrt6) ∧ (#eps == 1.110223024625157e-16) ∧ (2 < x) ∧ (x < 3.5) ∧ (2 < y) ∧ (y < 3.5) ∧ (x ≤ y) ∧ (#x == (x + (#delta_13 * x))) ∧ (#y == (y + (#delta_14 * y))) ∧ (#res == ((((#sqrt5 * x) - (y * x)) / x) + (-x))) ∧ (#fres == ((((1 + #delta_16) * (1 + #delta_15)) * ((((((#x * (1 + #delta_19)) * #sqrt6) * (1 + #delta_18)) - ((#x * (1 + #delta_18)) * #y)) * (1 + #delta_17)) / #x)) + ((-#x) * (1 + #delta_15)))) ∧ (#res < 0))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [2,3.5] ∧ y ∈ [2,3.5] ∧ (x ≤ y) ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: (#res ≥ 0)
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [2,3.5] ∧ y ∈ [2,3.5] ∧ (x ≤ y) ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: (#res ≥ 0)
[info] body after approx: ((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-5.129171306692425 ≤ #fres) ∧ (#fres ≤ -2.585786437613203) ∧ noise(#res, 3.108918362604285e-15))
[info] 
[info] approx: List((x ∈ [2,3.5] ∧ y ∈ [2,3.5] ∧ (x ≤ y) ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-5.129171306692425 ≤ #fres) ∧ (#fres ≤ -2.585786437613203) ∧ noise(#res, 3.108918362604285e-15) ∧ (#res < 0)))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_27) ∧ (#delta_27 ≤ #eps) ∧ (-(#eps) ≤ #delta_28) ∧ (#delta_28 ≤ #eps) ∧ ((#sqrt10 ^ 2) == x) ∧ (0 ≤ #sqrt10) ∧ (#eps == 1.110223024625157e-16) ∧ (2 < x) ∧ (x < 3.5) ∧ (2 < y) ∧ (y < 3.5) ∧ (x ≤ y) ∧ (#x == (x + (x * #delta_27))) ∧ (#y == (y + (y * #delta_28))) ∧ (#res == ((((#sqrt10 * x) - (y * x)) / x) + (-x))) ∧ (-5.129171306692425 ≤ #fres) ∧ (#fres ≤ -2.585786437613203) ∧ (#fres == (#res + #err_2)) ∧ (-3.108918362604285e-15 ≤ #err_2) ∧ (#err_2 ≤ 3.108918362604285e-15) ∧ (#res < 0))
[info] [ Info  ] ---- Unknown ----
[info] generated spec: Some(Spec([-5.129171306692421, -2.585786437613206],3.108918362604285e-15))
[info] [ Info  ] Verification condition (postcond.) ==== f2_actual ====
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: true
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: true
[info] 
[info] after PATH handling:
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: true
[info] 
[info] approx: List(((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x))) ∧ false))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_31) ∧ (#delta_31 ≤ #eps) ∧ ((#sqrt12 ^ 2) == x) ∧ (0 ≤ #sqrt12) ∧ (-(#eps) ≤ #delta_32) ∧ (#delta_32 ≤ #eps) ∧ (-(#eps) ≤ #delta_33) ∧ (#delta_33 ≤ #eps) ∧ (-(#eps) ≤ #delta_34) ∧ (#delta_34 ≤ #eps) ∧ (-(#eps) ≤ #delta_35) ∧ (#delta_35 ≤ #eps) ∧ (-(#eps) ≤ #delta_36) ∧ (#delta_36 ≤ #eps) ∧ ((#sqrt13 ^ 2) == #x) ∧ (0 ≤ #sqrt13) ∧ (#eps == 1.110223024625157e-16) ∧ (2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ (#x == (x + #err_3)) ∧ (-1.000000000000000e-05 ≤ #err_3) ∧ (#err_3 ≤ 1.000000000000000e-05) ∧ (#y == (y + (y * #delta_31))) ∧ (#res == ((((#sqrt12 * x) - (y * x)) / x) + (-x))) ∧ (#fres == ((((1 + #delta_33) * (((1 + #delta_34) * (((((1 + #delta_35) * #x) * #sqrt13) * (1 + #delta_36)) - (((1 + #delta_35) * #x) * #y))) / #x)) * (1 + #delta_32)) + ((-#x) * (1 + #delta_32)))) ∧ false)
[info] [ Info  ] Sanity check failed! 
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: true
[info] 
[info] after PATH handling:
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: true
[info] body after approx: ((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-8.283449721967832 ≤ #fres) ∧ (#fres ≤ -4.216735491669034) ∧ noise(#res, 2.481085218724958e-05))
[info] 
[info] approx: List(((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ noise(x, 1.000000000000000e-05) ∧ rndoof(y) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-8.283449721967832 ≤ #fres) ∧ (#fres ≤ -4.216735491669034) ∧ noise(#res, 2.481085218724958e-05) ∧ false))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_43) ∧ (#delta_43 ≤ #eps) ∧ ((#sqrt17 ^ 2) == x) ∧ (0 ≤ #sqrt17) ∧ (#eps == 1.110223024625157e-16) ∧ (2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ (#x == (x + #err_4)) ∧ (-1.000000000000000e-05 ≤ #err_4) ∧ (#err_4 ≤ 1.000000000000000e-05) ∧ (#y == (y + (#delta_43 * y))) ∧ (#res == ((((x * #sqrt17) - (y * x)) / x) + (-x))) ∧ (-8.283449721967832 ≤ #fres) ∧ (#fres ≤ -4.216735491669034) ∧ (#fres == (#res + #err_5)) ∧ (-2.481085218724958e-05 ≤ #err_5) ∧ (#err_5 ≤ 2.481085218724958e-05) ∧ false)
[info] [ Info  ] ==== VALID ====
[info] generated spec: Some(Spec([-8.283424911197610, -4.216760302521221],2.481085218724958e-05))
[info] [ Info  ] Verification condition (postcond.) ==== f1_simple ====
[info] pre: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-09))
[info] body: (#res == (x * x))
[info] post: ((#res ≤ 5) ∧ noise(#res, 1.000000000000000e-08))
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-09))
[info] body: (#res == (x * x))
[info] post: ((#res ≤ 5) ∧ noise(#res, 1.000000000000000e-08))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-09))
[info] body: Path(true,((#res == (x * x)) ∧ (#fres === (#x ⊗ #x))))
[info] post: ((#res ≤ 5) ∧ noise(#res, 1.000000000000000e-08))
[info] 
[info] approx: List((x ∈ [1,2] ∧ noise(x, 1.000000000000000e-09) ∧ (#res == (x * x)) ∧ (#fres === (#x ⊗ #x)) ∧ ((#res > 5) ∨ ¬(noise(#res, 1.000000000000000e-08)))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_45) ∧ (#delta_45 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (1 < x) ∧ (x < 2) ∧ (#x == (x + #err_6)) ∧ (-1.000000000000000e-09 ≤ #err_6) ∧ (#err_6 ≤ 1.000000000000000e-09) ∧ (#res == (x ^ 2)) ∧ (#fres == ((#x ^ 2) * (1 + #delta_45))) ∧ ((#res > 5) ∨ ¬(((#fres == (#res + #err_7)) ∧ (-1.000000000000000e-08 ≤ #err_7) ∧ (#err_7 ≤ 1.000000000000000e-08)))))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-09))
[info] body: (#res == (x * x))
[info] post: ((#res ≤ 5) ∧ noise(#res, 1.000000000000000e-08))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-09))
[info] body: Path(true,((#res == (x * x)) ∧ (#fres === (#x ⊗ #x))))
[info] post: ((#res ≤ 5) ∧ noise(#res, 1.000000000000000e-08))
[info] body after approx: ((#res == (x * x)) ∧ (0.9999999959999996 ≤ #fres) ∧ (#fres ≤ 4.000000004) ∧ noise(#res, 4.000000445089211e-09))
[info] 
[info] approx: List((x ∈ [1,2] ∧ noise(x, 1.000000000000000e-09) ∧ (#res == (x * x)) ∧ (0.9999999959999996 ≤ #fres) ∧ (#fres ≤ 4.000000004) ∧ noise(#res, 4.000000445089211e-09) ∧ ((#res > 5) ∨ ¬(noise(#res, 1.000000000000000e-08)))))
[info] 
[info]  z3constraint (0): ((1 < x) ∧ (x < 2) ∧ (#x == (x + #err_8)) ∧ (-1.000000000000000e-09 ≤ #err_8) ∧ (#err_8 ≤ 1.000000000000000e-09) ∧ (#res == (x ^ 2)) ∧ (0.9999999959999996 ≤ #fres) ∧ (#fres ≤ 4.000000004) ∧ (#fres == (#res + #err_9)) ∧ (-4.000000445089211e-09 ≤ #err_9) ∧ (#err_9 ≤ 4.000000445089211e-09) ∧ ((#res > 5) ∨ ¬(((#fres == (#res + #err_9)) ∧ (-1.000000000000000e-08 ≤ #err_9) ∧ (#err_9 ≤ 1.000000000000000e-08)))))
[info] [ Info  ] ==== VALID ====
[info] generated spec: Some(Spec([1.000000000000000, 4.000000000000000],4.000000445089211e-09))
[info] [ Info  ] Verification condition (postcond.) ==== f2_noNoise ====
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: ((#res ≤ 0) ∧ noise(#res, 1.000000000000000e-07))
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: ((#res ≤ 0) ∧ noise(#res, 1.000000000000000e-07))
[info] 
[info] after PATH handling:
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: ((#res ≤ 0) ∧ noise(#res, 1.000000000000000e-07))
[info] 
[info] approx: List(((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x))) ∧ ((#res > 0) ∨ ¬(noise(#res, 1.000000000000000e-07)))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_47) ∧ (#delta_47 ≤ #eps) ∧ (-(#eps) ≤ #delta_48) ∧ (#delta_48 ≤ #eps) ∧ ((#sqrt19 ^ 2) == x) ∧ (0 ≤ #sqrt19) ∧ (-(#eps) ≤ #delta_49) ∧ (#delta_49 ≤ #eps) ∧ (-(#eps) ≤ #delta_50) ∧ (#delta_50 ≤ #eps) ∧ (-(#eps) ≤ #delta_51) ∧ (#delta_51 ≤ #eps) ∧ (-(#eps) ≤ #delta_52) ∧ (#delta_52 ≤ #eps) ∧ (-(#eps) ≤ #delta_53) ∧ (#delta_53 ≤ #eps) ∧ ((#sqrt20 ^ 2) == #x) ∧ (0 ≤ #sqrt20) ∧ (#eps == 1.110223024625157e-16) ∧ (2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ (#x == (x + (#delta_47 * x))) ∧ (#y == (y + (y * #delta_48))) ∧ (#res == ((((#sqrt19 * x) - (y * x)) / x) + (-x))) ∧ (#fres == ((((1 + #delta_50) * (1 + #delta_49)) * (((1 + #delta_51) * ((((#x * (1 + #delta_53)) * (1 + #delta_52)) * #sqrt20) - ((#x * (1 + #delta_52)) * #y))) / #x)) + ((-#x) * (1 + #delta_49)))) ∧ ((#res > 0) ∨ ¬(((#fres == (#res + #err_10)) ∧ (-1.000000000000000e-07 ≤ #err_10) ∧ (#err_10 ≤ 1.000000000000000e-07)))))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: ((#res ≤ 0) ∧ noise(#res, 1.000000000000000e-07))
[info] 
[info] after PATH handling:
[info] pre: ((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: ((#res ≤ 0) ∧ noise(#res, 1.000000000000000e-07))
[info] body after approx: ((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-8.283424911197615 ≤ #fres) ∧ (#fres ≤ -4.216760302521217) ∧ noise(#res, 4.660576504258209e-15))
[info] 
[info] approx: List(((2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-8.283424911197615 ≤ #fres) ∧ (#fres ≤ -4.216760302521217) ∧ noise(#res, 4.660576504258209e-15) ∧ ((#res > 0) ∨ ¬(noise(#res, 1.000000000000000e-07)))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_61) ∧ (#delta_61 ≤ #eps) ∧ (-(#eps) ≤ #delta_62) ∧ (#delta_62 ≤ #eps) ∧ ((#sqrt24 ^ 2) == x) ∧ (0 ≤ #sqrt24) ∧ (#eps == 1.110223024625157e-16) ∧ (2.2 ≤ x) ∧ (x ≤ 2.3) ∧ (3.5 ≤ y) ∧ (y ≤ 7.5) ∧ (#x == (x + (#delta_61 * x))) ∧ (#y == (y + (y * #delta_62))) ∧ (#res == ((((#sqrt24 * x) - (y * x)) / x) + (-x))) ∧ (-8.283424911197615 ≤ #fres) ∧ (#fres ≤ -4.216760302521217) ∧ (#fres == (#res + #err_11)) ∧ (-4.660576504258209e-15 ≤ #err_11) ∧ (#err_11 ≤ 4.660576504258209e-15) ∧ ((#res > 0) ∨ ¬(((#fres == (#res + #err_11)) ∧ (-1.000000000000000e-07 ≤ #err_11) ∧ (#err_11 ≤ 1.000000000000000e-07)))))
[info] [ Info  ] ==== VALID ====
[info] generated spec: Some(Spec([-8.283424911197610, -4.216760302521221],4.660576504258209e-15))
[info] [ Info  ] Verification condition (postcond.) ==== ints ====
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == ((x * x) + 7))
[info] post: true
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == ((x * x) + 7))
[info] post: true
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == ((x * x) + 7)) ∧ (#fres === ((#x ⊗ #x) ⊕ 7))))
[info] post: true
[info] 
[info] approx: List((x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == ((x * x) + 7)) ∧ (#fres === ((#x ⊗ #x) ⊕ 7)) ∧ false))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_65) ∧ (#delta_65 ≤ #eps) ∧ (-(#eps) ≤ #delta_66) ∧ (#delta_66 ≤ #eps) ∧ (-(#eps) ≤ #delta_67) ∧ (#delta_67 ≤ #eps) ∧ (-(#eps) ≤ #delta_68) ∧ (#delta_68 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (-2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + (#delta_65 * x))) ∧ (#y == (y + (y * #delta_66))) ∧ (#res == ((x ^ 2) + 7)) ∧ (#fres == ((((#x ^ 2) * (1 + #delta_67)) * (1 + #delta_68)) + ((1 + #delta_67) * 7))) ∧ false)
[info] [ Info  ] ==== VALID ====
[info] generated spec: None
[info] [ Info  ] Verification condition (postcond.) ==== f2_cnstr ====
[info] pre: ((2 ≤ x) ∧ (x ≤ 3.5) ∧ (2 ≤ y) ∧ (y ≤ 3.5) ∧ ((3 * x) ≥ y) ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: (#res ≥ 0)
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: ((2 ≤ x) ∧ (x ≤ 3.5) ∧ (2 ≤ y) ∧ (y ≤ 3.5) ∧ ((3 * x) ≥ y) ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: (#res ≥ 0)
[info] 
[info] after PATH handling:
[info] pre: ((2 ≤ x) ∧ (x ≤ 3.5) ∧ (2 ≤ y) ∧ (y ≤ 3.5) ∧ ((3 * x) ≥ y) ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: (#res ≥ 0)
[info] 
[info] approx: List(((2 ≤ x) ∧ (x ≤ 3.5) ∧ (2 ≤ y) ∧ (y ≤ 3.5) ∧ ((3 * x) ≥ y) ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x))) ∧ (#res < 0)))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_73) ∧ (#delta_73 ≤ #eps) ∧ (-(#eps) ≤ #delta_74) ∧ (#delta_74 ≤ #eps) ∧ ((#sqrt26 ^ 2) == x) ∧ (0 ≤ #sqrt26) ∧ (-(#eps) ≤ #delta_75) ∧ (#delta_75 ≤ #eps) ∧ (-(#eps) ≤ #delta_76) ∧ (#delta_76 ≤ #eps) ∧ (-(#eps) ≤ #delta_77) ∧ (#delta_77 ≤ #eps) ∧ (-(#eps) ≤ #delta_78) ∧ (#delta_78 ≤ #eps) ∧ (-(#eps) ≤ #delta_79) ∧ (#delta_79 ≤ #eps) ∧ ((#sqrt27 ^ 2) == #x) ∧ (0 ≤ #sqrt27) ∧ (#eps == 1.110223024625157e-16) ∧ (2 ≤ x) ∧ (x ≤ 3.5) ∧ (2 ≤ y) ∧ (y ≤ 3.5) ∧ ((x * 3) ≥ y) ∧ (#x == (x + (#delta_73 * x))) ∧ (#y == (y + (y * #delta_74))) ∧ (#res == ((((x * #sqrt26) - (y * x)) / x) + (-x))) ∧ (#fres == ((((1 + #delta_76) * (1 + #delta_75)) * (((1 + #delta_77) * ((((#x * (1 + #delta_79)) * (1 + #delta_78)) * #sqrt27) - ((#x * (1 + #delta_78)) * #y))) / #x)) + ((-#x) * (1 + #delta_75)))) ∧ (#res < 0))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: ((2 ≤ x) ∧ (x ≤ 3.5) ∧ (2 ≤ y) ∧ (y ≤ 3.5) ∧ ((3 * x) ≥ y) ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: (#res ≥ 0)
[info] 
[info] after PATH handling:
[info] pre: ((2 ≤ x) ∧ (x ≤ 3.5) ∧ (2 ≤ y) ∧ (y ≤ 3.5) ∧ ((3 * x) ≥ y) ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: (#res ≥ 0)
[info] body after approx: ((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-5.129171306642264 ≤ #fres) ∧ (#fres ≤ -2.585786437618714) ∧ noise(#res, 3.178811247341572e-15))
[info] 
[info] approx: List(((2 ≤ x) ∧ (x ≤ 3.5) ∧ (2 ≤ y) ∧ (y ≤ 3.5) ∧ ((3 * x) ≥ y) ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-5.129171306642264 ≤ #fres) ∧ (#fres ≤ -2.585786437618714) ∧ noise(#res, 3.178811247341572e-15) ∧ (#res < 0)))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_87) ∧ (#delta_87 ≤ #eps) ∧ (-(#eps) ≤ #delta_88) ∧ (#delta_88 ≤ #eps) ∧ ((#sqrt31 ^ 2) == x) ∧ (0 ≤ #sqrt31) ∧ (#eps == 1.110223024625157e-16) ∧ (2 ≤ x) ∧ (x ≤ 3.5) ∧ (2 ≤ y) ∧ (y ≤ 3.5) ∧ ((x * 3) ≥ y) ∧ (#x == (x + (x * #delta_87))) ∧ (#y == (y + (#delta_88 * y))) ∧ (#res == ((((#sqrt31 * x) - (y * x)) / x) + (-x))) ∧ (-5.129171306642264 ≤ #fres) ∧ (#fres ≤ -2.585786437618714) ∧ (#fres == (#res + #err_12)) ∧ (-3.178811247341572e-15 ≤ #err_12) ∧ (#err_12 ≤ 3.178811247341572e-15) ∧ (#res < 0))
[info] [ Info  ] ---- Unknown ----
[info] generated spec: Some(Spec([-5.129171306642261, -2.585786437618717],3.178811247341572e-15))
[info] [ Info  ] Verification condition (postcond.) ==== f1_withNoise ====
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: ((#res ≤ 0) ∧ noise(#res, 3.000000000000000e-05))
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: ((#res ≤ 0) ∧ noise(#res, 3.000000000000000e-05))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: ((#res ≤ 0) ∧ noise(#res, 3.000000000000000e-05))
[info] 
[info] approx: List((x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x))) ∧ ((#res > 0) ∨ ¬(noise(#res, 3.000000000000000e-05)))))
[info] 
[info]  z3constraint (0): (((#sqrt33 ^ 2) == x) ∧ (0 ≤ #sqrt33) ∧ (-(#eps) ≤ #delta_91) ∧ (#delta_91 ≤ #eps) ∧ (-(#eps) ≤ #delta_92) ∧ (#delta_92 ≤ #eps) ∧ (-(#eps) ≤ #delta_93) ∧ (#delta_93 ≤ #eps) ∧ (-(#eps) ≤ #delta_94) ∧ (#delta_94 ≤ #eps) ∧ (-(#eps) ≤ #delta_95) ∧ (#delta_95 ≤ #eps) ∧ ((#sqrt34 ^ 2) == #x) ∧ (0 ≤ #sqrt34) ∧ (#eps == 1.110223024625157e-16) ∧ (2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + #err_13)) ∧ (-1.000000000000000e-05 ≤ #err_13) ∧ (#err_13 ≤ 1.000000000000000e-05) ∧ (#y == (y + #err_14)) ∧ (-1.000000000000000e-07 ≤ #err_14) ∧ (#err_14 ≤ 1.000000000000000e-07) ∧ (#res == ((((#sqrt33 * x) - (y * x)) / x) + (-x))) ∧ (#fres == ((((1 + #delta_92) * ((((((#x * #sqrt34) * (1 + #delta_94)) * (1 + #delta_95)) - ((#x * (1 + #delta_94)) * #y)) * (1 + #delta_93)) / #x)) * (1 + #delta_91)) + ((-#x) * (1 + #delta_91)))) ∧ ((#res > 0) ∨ ¬(((#fres == (#res + #err_15)) ∧ (-3.000000000000000e-05 ≤ #err_15) ∧ (#err_15 ≤ 3.000000000000000e-05)))))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: ((#res ≤ 0) ∧ noise(#res, 3.000000000000000e-05))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: ((#res ≤ 0) ∧ noise(#res, 3.000000000000000e-05))
[info] body after approx: ((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-8.283449826514214 ≤ #fres) ∧ (#fres ≤ -4.21673538712265) ∧ noise(#res, 2.491539857068297e-05))
[info] 
[info] approx: List((x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-8.283449826514214 ≤ #fres) ∧ (#fres ≤ -4.21673538712265) ∧ noise(#res, 2.491539857068297e-05) ∧ ((#res > 0) ∨ ¬(noise(#res, 3.000000000000000e-05)))))
[info] 
[info]  z3constraint (0): (((#sqrt38 ^ 2) == x) ∧ (0 ≤ #sqrt38) ∧ (2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + #err_16)) ∧ (-1.000000000000000e-05 ≤ #err_16) ∧ (#err_16 ≤ 1.000000000000000e-05) ∧ (#y == (y + #err_17)) ∧ (-1.000000000000000e-07 ≤ #err_17) ∧ (#err_17 ≤ 1.000000000000000e-07) ∧ (#res == ((((x * #sqrt38) - (y * x)) / x) + (-x))) ∧ (-8.283449826514214 ≤ #fres) ∧ (#fres ≤ -4.21673538712265) ∧ (#fres == (#res + #err_18)) ∧ (-2.491539857068297e-05 ≤ #err_18) ∧ (#err_18 ≤ 2.491539857068297e-05) ∧ ((#res > 0) ∨ ¬(((#fres == (#res + #err_18)) ∧ (-3.000000000000000e-05 ≤ #err_18) ∧ (#err_18 ≤ 3.000000000000000e-05)))))
[info] [ Info  ] ==== VALID ====
[info] generated spec: Some(Spec([-8.283424911197610, -4.216760302521221],2.491539857068297e-05))
[info] [ Info  ] Verification condition (postcond.) ==== f2_simple ====
[info] pre: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-05))
[info] body: (#res == (x * x))
[info] post: (#res ≤ 3)
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-05))
[info] body: (#res == (x * x))
[info] post: (#res ≤ 3)
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-05))
[info] body: Path(true,((#res == (x * x)) ∧ (#fres === (#x ⊗ #x))))
[info] post: (#res ≤ 3)
[info] 
[info] approx: List((x ∈ [1,2] ∧ noise(x, 1.000000000000000e-05) ∧ (#res == (x * x)) ∧ (#fres === (#x ⊗ #x)) ∧ (#res > 3)))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_101) ∧ (#delta_101 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (1 < x) ∧ (x < 2) ∧ (#x == (x + #err_19)) ∧ (-1.000000000000000e-05 ≤ #err_19) ∧ (#err_19 ≤ 1.000000000000000e-05) ∧ (#res == (x ^ 2)) ∧ (#fres == ((#x ^ 2) * (1 + #delta_101))) ∧ (#res > 3))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-05))
[info] body: (#res == (x * x))
[info] post: (#res ≤ 3)
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [1,2] ∧ noise(x, 1.000000000000000e-05))
[info] body: Path(true,((#res == (x * x)) ∧ (#fres === (#x ⊗ #x))))
[info] post: (#res ≤ 3)
[info] body after approx: ((#res == (x * x)) ∧ (0.9999599999999995 ≤ #fres) ∧ (#fres ≤ 4.0000400001) ∧ noise(#res, 4.000010000044410e-05))
[info] 
[info] approx: List((x ∈ [1,2] ∧ noise(x, 1.000000000000000e-05) ∧ (#res == (x * x)) ∧ (0.9999599999999995 ≤ #fres) ∧ (#fres ≤ 4.0000400001) ∧ noise(#res, 4.000010000044410e-05) ∧ (#res > 3)))
[info] 
[info]  z3constraint (0): ((1 < x) ∧ (x < 2) ∧ (#x == (x + #err_20)) ∧ (-1.000000000000000e-05 ≤ #err_20) ∧ (#err_20 ≤ 1.000000000000000e-05) ∧ (#res == (x ^ 2)) ∧ (0.9999599999999995 ≤ #fres) ∧ (#fres ≤ 4.0000400001) ∧ (#fres == (#res + #err_21)) ∧ (-4.000010000044410e-05 ≤ #err_21) ∧ (#err_21 ≤ 4.000010000044410e-05) ∧ (#res > 3))
[info] [ Info  ] ---- Unknown ----
[info] generated spec: Some(Spec([1.000000000000000, 4.000000000000000],4.000010000044410e-05))
[info] [ Info  ] Verification condition (postcond.) ==== f1_actual ====
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: ((~#res ≤ 0) ∧ noise(#res, 1.000000000000000e-06))
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: ((~#res ≤ 0) ∧ noise(#res, 1.000000000000000e-06))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: ((~#res ≤ 0) ∧ noise(#res, 1.000000000000000e-06))
[info] 
[info] approx: List((x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x))) ∧ ((~#res > 0) ∨ ¬(noise(#res, 1.000000000000000e-06)))))
[info] 
[info]  z3constraint (0): (((#sqrt40 ^ 2) == x) ∧ (0 ≤ #sqrt40) ∧ (-(#eps) ≤ #delta_103) ∧ (#delta_103 ≤ #eps) ∧ (-(#eps) ≤ #delta_104) ∧ (#delta_104 ≤ #eps) ∧ (-(#eps) ≤ #delta_105) ∧ (#delta_105 ≤ #eps) ∧ (-(#eps) ≤ #delta_106) ∧ (#delta_106 ≤ #eps) ∧ (-(#eps) ≤ #delta_107) ∧ (#delta_107 ≤ #eps) ∧ ((#sqrt41 ^ 2) == #x) ∧ (0 ≤ #sqrt41) ∧ (#eps == 1.110223024625157e-16) ∧ (2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + #err_22)) ∧ (-1.000000000000000e-05 ≤ #err_22) ∧ (#err_22 ≤ 1.000000000000000e-05) ∧ (#y == (y + #err_23)) ∧ (-1.000000000000000e-07 ≤ #err_23) ∧ (#err_23 ≤ 1.000000000000000e-07) ∧ (#res == ((((#sqrt40 * x) - (y * x)) / x) + (-x))) ∧ (#fres == ((((1 + #delta_104) * (1 + #delta_103)) * ((((((#x * (1 + #delta_107)) * (1 + #delta_106)) * #sqrt41) - ((#x * (1 + #delta_106)) * #y)) * (1 + #delta_105)) / #x)) + ((-#x) * (1 + #delta_103)))) ∧ ((#fres > 0) ∨ ¬(((#fres == (#res + #err_24)) ∧ (-1.000000000000000e-06 ≤ #err_24) ∧ (#err_24 ≤ 1.000000000000000e-06)))))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + (-x)))
[info] post: ((~#res ≤ 0) ∧ noise(#res, 1.000000000000000e-06))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ (⊖#x)))))
[info] post: ((~#res ≤ 0) ∧ noise(#res, 1.000000000000000e-06))
[info] body after approx: ((#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-8.283449826514214 ≤ #fres) ∧ (#fres ≤ -4.21673538712265) ∧ noise(#res, 2.491539857068297e-05))
[info] 
[info] approx: List((x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ noise(x, 1.000000000000000e-05) ∧ noise(y, 1.000000000000000e-07) ∧ (#res == (((x * (sqrt(x) - y)) / x) + (-x))) ∧ (-8.283449826514214 ≤ #fres) ∧ (#fres ≤ -4.21673538712265) ∧ noise(#res, 2.491539857068297e-05) ∧ ((~#res > 0) ∨ ¬(noise(#res, 1.000000000000000e-06)))))
[info] 
[info]  z3constraint (0): (((#sqrt45 ^ 2) == x) ∧ (0 ≤ #sqrt45) ∧ (2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + #err_25)) ∧ (-1.000000000000000e-05 ≤ #err_25) ∧ (#err_25 ≤ 1.000000000000000e-05) ∧ (#y == (y + #err_26)) ∧ (-1.000000000000000e-07 ≤ #err_26) ∧ (#err_26 ≤ 1.000000000000000e-07) ∧ (#res == ((((#sqrt45 * x) - (y * x)) / x) + (-x))) ∧ (-8.283449826514214 ≤ #fres) ∧ (#fres ≤ -4.21673538712265) ∧ (#fres == (#res + #err_27)) ∧ (-2.491539857068297e-05 ≤ #err_27) ∧ (#err_27 ≤ 2.491539857068297e-05) ∧ ((#fres > 0) ∨ ¬(((#fres == (#res + #err_27)) ∧ (-1.000000000000000e-06 ≤ #err_27) ∧ (#err_27 ≤ 1.000000000000000e-06)))))
[info] [ Info  ] ---- Unknown ----
[info] generated spec: Some(Spec([-8.283424911197610, -4.216760302521221],2.491539857068297e-05))
[info] [ Info  ] Verification condition (postcond.) ==== f1_noNoise ====
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + ((-x) * 2.1)))
[info] post: (#res ≤ 0)
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (((x * (sqrt(x) - y)) / x) + ((-x) * 2.1)))
[info] post: (#res ≤ 0)
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == (((x * (sqrt(x) - y)) / x) + ((-x) * 2.1))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ ((⊖#x) ⊗ 2.1)))))
[info] post: (#res ≤ 0)
[info] 
[info] approx: List((x ∈ [2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == (((x * (sqrt(x) - y)) / x) + ((-x) * 2.1))) ∧ (#fres === (((#x ⊗ (sqrtF(#x) ⊖ #y)) ⊘ #x) ⊕ ((⊖#x) ⊗ 2.1))) ∧ (#res > 0)))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_113) ∧ (#delta_113 ≤ #eps) ∧ (-(#eps) ≤ #delta_114) ∧ (#delta_114 ≤ #eps) ∧ ((#sqrt47 ^ 2) == x) ∧ (0 ≤ #sqrt47) ∧ (-(#eps) ≤ #delta_115) ∧ (#delta_115 ≤ #eps) ∧ (-(#eps) ≤ #delta_116) ∧ (#delta_116 ≤ #eps) ∧ (-(#eps) ≤ #delta_117) ∧ (#delta_117 ≤ #eps) ∧ (-(#eps) ≤ #delta_118) ∧ (#delta_118 ≤ #eps) ∧ (-(#eps) ≤ #delta_119) ∧ (#delta_119 ≤ #eps) ∧ ((#sqrt48 ^ 2) == #x) ∧ (0 ≤ #sqrt48) ∧ (-(#eps) ≤ #delta_120) ∧ (#delta_120 ≤ #eps) ∧ (-(#eps) ≤ #delta_121) ∧ (#delta_121 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + (#delta_113 * x))) ∧ (#y == (y + (#delta_114 * y))) ∧ (#res == ((((x * #sqrt47) - (y * x)) / x) + (x * -2.1))) ∧ (#fres == ((((1 + #delta_116) * (1 + #delta_115)) * ((((((#x * (1 + #delta_119)) * #sqrt48) * (1 + #delta_118)) - ((#x * (1 + #delta_118)) * #y)) * (1 + #delta_117)) / #x)) + (((((1 + #delta_115) * (1 + #delta_121)) * (-#x)) * 2.1) * (1 + #delta_120)))) ∧ (#res > 0))
[info] [ Info  ] ==== VALID ====
[info] generated spec: None
[info] [ Info  ] Generated program with 56 lines.
[info] [ Info  ] . ┌─────────┐
[info]           ╔═╡ Summary ╞═══════════════════════════════════════════════════════════════════════╗
[info]           ║ └─────────┘                                                                       ║
[info]           ║ f1_actual                 postcond.           unknown                       3.914 ║
[info]           ║ f1_cnstr                  postcond.           unknown                       1.954 ║
[info]           ║ f1_noNoise                postcond.           valid                         0.106 ║
[info]           ║ f1_simple                 postcond.           valid                         0.074 ║
[info]           ║ f1_withNoise              postcond.           valid                         3.342 ║
[info]           ║ f2_actual                 postcond.           valid                        43.537 ║
[info]           ║ f2_cnstr                  postcond.           unknown                       1.716 ║
[info]           ║ f2_noNoise                postcond.           valid                         3.300 ║
[info]           ║ f2_simple                 postcond.           unknown                       0.044 ║
[info]           ║ f2_withNoise              postcond.           valid                         0.312 ║
[info]           ║ ints                      postcond.           valid                         0.021 ║
[info]           ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[info]           ║ total: 11     valid: 7      invalid: 0      unknown 4                      58.320 ║
[info]           ║ precision: leon.real.package$Float64$@1a124026                                                             ║
[info]           ╚═══════════════════════════════════════════════════════════════════════════════════╝
[success] Total time: 63 s, completed Sep 5, 2013 5:41:54 PM
> 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

IfThenElse
[info] Running leon.Main --real testcases/real-testcases/unit-tests/IfThenElse.scala
[info] [ Info  ] Running Compilation phase
[info] options: simulation: false,
[info] z3 timeout: 1000,
[info] precision: List(leon.real.package$Float64$@556eaccc),
[info] z3Only: false,
[info] pathSensitive: false
[info] [ Info  ] Analysing fnc:  f3
[info] if ((x ≤ 0.2))
[info]   x
[info] else
[info]   if ((x ≤ 1.2))
[info]     (2 * x)
[info]   else
[info]     (1.5 * x)
[info] parameters: Map(x -> x = #x (0, 5) +/- 1.000000000000000e-05, #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] [ Info  ] Analysing fnc:  f4
[info] if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)
[info] parameters: Map(x -> x = #x (-2.2, 2.3) +/-  -- , y -> y = #y (3.5, 7.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] [ Info  ] Analysing fnc:  f2
[info] (let (z := if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) in
[info]   (z / 3))
[info] parameters: Map(x -> x = #x (0, 5) +/- 1.000000000000000e-05, #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] [ Info  ] Analysing fnc:  f1
[info] if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)
[info] parameters: Map(x -> x = #x (0, 5) +/- 1.000000000000000e-05, #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] [ Info  ] Analysing fnc:  f5
[info] (let (z := if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) in
[info]   (z * z))
[info] parameters: Map(x -> x = #x (-2.2, 2.3) +/-  -- , y -> y = #y (3.5, 7.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] [ Info  ] ******** precision: leon.real.package$Float64$@556eaccc *************
[info] [ Info  ] Verification condition (postcond.) ==== f5 ====
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: ((z == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#res == (z * z)))
[info] post: noise(#res, 1.000000000000000e-06)
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: ((z == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#res == (z * z)))
[info] post: noise(#res, 1.000000000000000e-06)
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((z == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#res == (z * z)) ∧ (#z === iff (((x * x) ≤ 0))
[info]   iff ((y ≤ 5.4))
[info]     ((#x ⊗ #x) ⊕ #y)
[info]   elsse
[info]     (#x ⊘ #y)
[info] elsse
[info]   (#x ⊘ #y)) ∧ (#fres === (#z ⊗ #z))))
[info] post: noise(#res, 1.000000000000000e-06)
[info] 
[info] approx: List((x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y) ∧ (z == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#res == (z * z)) ∧ (#z === iff (((x * x) ≤ 0))
[info]   iff ((y ≤ 5.4))
[info]     ((#x ⊗ #x) ⊕ #y)
[info]   elsse
[info]     (#x ⊘ #y)
[info] elsse
[info]   (#x ⊘ #y)) ∧ (#fres === (#z ⊗ #z)) ∧ ¬(noise(#res, 1.000000000000000e-06))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_1) ∧ (#delta_1 ≤ #eps) ∧ (-(#eps) ≤ #delta_2) ∧ (#delta_2 ≤ #eps) ∧ (-(#eps) ≤ #delta_3) ∧ (#delta_3 ≤ #eps) ∧ (-(#eps) ≤ #delta_4) ∧ (#delta_4 ≤ #eps) ∧ (-(#eps) ≤ #delta_5) ∧ (#delta_5 ≤ #eps) ∧ (-(#eps) ≤ #delta_6) ∧ (#delta_6 ≤ #eps) ∧ (-(#eps) ≤ #delta_7) ∧ (#delta_7 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (-2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + (x * #delta_1))) ∧ (#y == (y + (y * #delta_2))) ∧ (z == if (((x ^ 2) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x ^ 2) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#res == (z ^ 2)) ∧ (#z == if (((x ^ 2) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((((#x ^ 2) * (1 + #delta_4)) * (1 + #delta_3)) + ((1 + #delta_3) * #y))
[info]   else
[info]     ((#x / #y) * (1 + #delta_5))
[info] else
[info]   ((1 + #delta_6) * (#x / #y))) ∧ (#fres == ((1 + #delta_7) * (#z ^ 2))) ∧ ¬(((#fres == (#res + #err_1)) ∧ (-1.000000000000000e-06 ≤ #err_1) ∧ (#err_1 ≤ 1.000000000000000e-06))))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: ((z == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#res == (z * z)))
[info] post: noise(#res, 1.000000000000000e-06)
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((z == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#res == (z * z)) ∧ (#z === iff (((x * x) ≤ 0))
[info]   iff ((y ≤ 5.4))
[info]     ((#x ⊗ #x) ⊕ #y)
[info]   elsse
[info]     (#x ⊘ #y)
[info] elsse
[info]   (#x ⊘ #y)) ∧ (#fres === (#z ⊗ #z))))
[info] post: noise(#res, 1.000000000000000e-06)
[info] body after approx: ((z == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#res == (z * z)) ∧ (-4.656761167152955e-11 ≤ #z) ∧ (#z ≤ 5.40000000004363) ∧ noise(z, 1.432187703067743e-15) ∧ (-3.930915021741892e-11 ≤ #fres) ∧ (#fres ≤ 29.1600000004712) ∧ noise(#res, 1.870503757093287e-14))
[info] 
[info] approx: List((x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y) ∧ (z == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#res == (z * z)) ∧ (-4.656761167152955e-11 ≤ #z) ∧ (#z ≤ 5.40000000004363) ∧ noise(z, 1.432187703067743e-15) ∧ (-3.930915021741892e-11 ≤ #fres) ∧ (#fres ≤ 29.1600000004712) ∧ noise(#res, 1.870503757093287e-14) ∧ ¬(noise(#res, 1.000000000000000e-06))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_15) ∧ (#delta_15 ≤ #eps) ∧ (-(#eps) ≤ #delta_16) ∧ (#delta_16 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (-2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + (x * #delta_15))) ∧ (#y == (y + (y * #delta_16))) ∧ (z == if (((x ^ 2) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x ^ 2) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#res == (z ^ 2)) ∧ (-4.656761167152955e-11 ≤ #z) ∧ (#z ≤ 5.40000000004363) ∧ (#z == (z + #err_2)) ∧ (-1.432187703067743e-15 ≤ #err_2) ∧ (#err_2 ≤ 1.432187703067743e-15) ∧ (-3.930915021741892e-11 ≤ #fres) ∧ (#fres ≤ 29.1600000004712) ∧ (#fres == (#res + #err_3)) ∧ (-1.870503757093287e-14 ≤ #err_3) ∧ (#err_3 ≤ 1.870503757093287e-14) ∧ ¬(((#fres == (#res + #err_3)) ∧ (-1.000000000000000e-06 ≤ #err_3) ∧ (#err_3 ≤ 1.000000000000000e-06))))
[info] [ Info  ] ==== VALID ====
[info] generated spec: Some(Spec([-3.929044517984799e-11, 29.16000000047118],1.870503757093287e-14))
[info] [ Info  ] Verification condition (postcond.) ==== f1 ====
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x))
[info] post: ((#res ≤ 10) ∧ noise(#res, 0.0001))
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x))
[info] post: ((#res ≤ 10) ∧ noise(#res, 0.0001))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: Path(true,((#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#fres === iff ((x ≤ 0.2))
[info]   #x
[info] elsse
[info]   (2 ⊗ #x))))
[info] post: ((#res ≤ 10) ∧ noise(#res, 0.0001))
[info] 
[info] approx: List((x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05) ∧ (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#fres === iff ((x ≤ 0.2))
[info]   #x
[info] elsse
[info]   (2 ⊗ #x)) ∧ ((#res > 10) ∨ ¬(noise(#res, 0.0001)))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_19) ∧ (#delta_19 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (0 < x) ∧ (x < 5) ∧ (#x == (x + #err_4)) ∧ (-1.000000000000000e-05 ≤ #err_4) ∧ (#err_4 ≤ 1.000000000000000e-05) ∧ (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#fres == if ((x ≤ 0.2))
[info]   #x
[info] else
[info]   ((#x * 2) * (1 + #delta_19))) ∧ ((#res > 10) ∨ ¬(((#fres == (#res + #err_5)) ∧ (-0.0001 ≤ #err_5) ∧ (#err_5 ≤ 0.0001)))))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x))
[info] post: ((#res ≤ 10) ∧ noise(#res, 0.0001))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: Path(true,((#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#fres === iff ((x ≤ 0.2))
[info]   #x
[info] elsse
[info]   (2 ⊗ #x))))
[info] post: ((#res ≤ 10) ∧ noise(#res, 0.0001))
[info] body after approx: ((#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (-2.000000000004441e-05 ≤ #fres) ∧ (#fres ≤ 5.00002) ∧ noise(#res, 2.000000000004441e-05))
[info] 
[info] approx: List((x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05) ∧ (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (-2.000000000004441e-05 ≤ #fres) ∧ (#fres ≤ 5.00002) ∧ noise(#res, 2.000000000004441e-05) ∧ ((#res > 10) ∨ ¬(noise(#res, 0.0001)))))
[info] 
[info]  z3constraint (0): ((0 < x) ∧ (x < 5) ∧ (#x == (x + #err_6)) ∧ (-1.000000000000000e-05 ≤ #err_6) ∧ (#err_6 ≤ 1.000000000000000e-05) ∧ (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (-2.000000000004441e-05 ≤ #fres) ∧ (#fres ≤ 5.00002) ∧ (#fres == (#res + #err_7)) ∧ (-2.000000000004441e-05 ≤ #err_7) ∧ (#err_7 ≤ 2.000000000004441e-05) ∧ ((#res > 10) ∨ ¬(((#fres == (#res + #err_7)) ∧ (-0.0001 ≤ #err_7) ∧ (#err_7 ≤ 0.0001)))))
[info] [ Info  ] ==== VALID ====
[info] generated spec: Some(Spec([0.000000000000000, 5.000000000000000],2.000000000004441e-05))
[info] [ Info  ] Verification condition (postcond.) ==== f2 ====
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: ((z == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#res == (z / 3)))
[info] post: ((#res ≤ 3.5) ∧ noise(#res, 0.0001))
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: ((z == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#res == (z / 3)))
[info] post: ((#res ≤ 3.5) ∧ noise(#res, 0.0001))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: Path(true,((z == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#res == (z / 3)) ∧ (#z === iff ((x ≤ 0.2))
[info]   #x
[info] elsse
[info]   (2 ⊗ #x)) ∧ (#fres === (#z ⊘ 3))))
[info] post: ((#res ≤ 3.5) ∧ noise(#res, 0.0001))
[info] 
[info] approx: List((x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05) ∧ (z == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#res == (z / 3)) ∧ (#z === iff ((x ≤ 0.2))
[info]   #x
[info] elsse
[info]   (2 ⊗ #x)) ∧ (#fres === (#z ⊘ 3)) ∧ ((#res > 3.5) ∨ ¬(noise(#res, 0.0001)))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_21) ∧ (#delta_21 ≤ #eps) ∧ (-(#eps) ≤ #delta_22) ∧ (#delta_22 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (0 < x) ∧ (x < 5) ∧ (#x == (x + #err_8)) ∧ (-1.000000000000000e-05 ≤ #err_8) ∧ (#err_8 ≤ 1.000000000000000e-05) ∧ (z == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#res == (z / 3)) ∧ (#z == if ((x ≤ 0.2))
[info]   #x
[info] else
[info]   ((#x * 2) * (1 + #delta_21))) ∧ (#fres == ((1 + #delta_22) * (#z / 3))) ∧ ((#res > 3.5) ∨ ¬(((#fres == (#res + #err_9)) ∧ (-0.0001 ≤ #err_9) ∧ (#err_9 ≤ 0.0001)))))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: ((z == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#res == (z / 3)))
[info] post: ((#res ≤ 3.5) ∧ noise(#res, 0.0001))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: Path(true,((z == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#res == (z / 3)) ∧ (#z === iff ((x ≤ 0.2))
[info]   #x
[info] elsse
[info]   (2 ⊗ #x)) ∧ (#fres === (#z ⊘ 3))))
[info] post: ((#res ≤ 3.5) ∧ noise(#res, 0.0001))
[info] body after approx: ((z == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#res == (z / 3)) ∧ (-2.000000000004441e-05 ≤ #z) ∧ (#z ≤ 5.00002) ∧ noise(z, 2.000000000004441e-05) ∧ (-6.666666666866509e-06 ≤ #fres) ∧ (#fres ≤ 1.666673333333334) ∧ noise(#res, 6.666666666866509e-06))
[info] 
[info] approx: List((x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05) ∧ (z == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#res == (z / 3)) ∧ (-2.000000000004441e-05 ≤ #z) ∧ (#z ≤ 5.00002) ∧ noise(z, 2.000000000004441e-05) ∧ (-6.666666666866509e-06 ≤ #fres) ∧ (#fres ≤ 1.666673333333334) ∧ noise(#res, 6.666666666866509e-06) ∧ ((#res > 3.5) ∨ ¬(noise(#res, 0.0001)))))
[info] 
[info]  z3constraint (0): ((0 < x) ∧ (x < 5) ∧ (#x == (x + #err_10)) ∧ (-1.000000000000000e-05 ≤ #err_10) ∧ (#err_10 ≤ 1.000000000000000e-05) ∧ (z == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   (2 * x)) ∧ (#res == (z / 3)) ∧ (-2.000000000004441e-05 ≤ #z) ∧ (#z ≤ 5.00002) ∧ (#z == (z + #err_11)) ∧ (-2.000000000004441e-05 ≤ #err_11) ∧ (#err_11 ≤ 2.000000000004441e-05) ∧ (-6.666666666866509e-06 ≤ #fres) ∧ (#fres ≤ 1.666673333333334) ∧ (#fres == (#res + #err_12)) ∧ (-6.666666666866509e-06 ≤ #err_12) ∧ (#err_12 ≤ 6.666666666866509e-06) ∧ ((#res > 3.5) ∨ ¬(((#fres == (#res + #err_12)) ∧ (-0.0001 ≤ #err_12) ∧ (#err_12 ≤ 0.0001)))))
[info] [ Info  ] ==== VALID ====
[info] generated spec: Some(Spec([0.000000000000000, 1.666666666666667],6.666666666866509e-06))
[info] [ Info  ] Verification condition (postcond.) ==== f4 ====
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y))
[info] post: ((~#res ≤ 4) ∧ (0 ≤ ~#res))
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y))
[info] post: ((~#res ≤ 4) ∧ (0 ≤ ~#res))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#fres === iff (((x * x) ≤ 0))
[info]   iff ((y ≤ 5.4))
[info]     ((#x ⊗ #x) ⊕ #y)
[info]   elsse
[info]     (#x ⊘ #y)
[info] elsse
[info]   (#x ⊘ #y))))
[info] post: ((~#res ≤ 4) ∧ (0 ≤ ~#res))
[info] 
[info] approx: List((x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#fres === iff (((x * x) ≤ 0))
[info]   iff ((y ≤ 5.4))
[info]     ((#x ⊗ #x) ⊕ #y)
[info]   elsse
[info]     (#x ⊘ #y)
[info] elsse
[info]   (#x ⊘ #y)) ∧ ((~#res > 4) ∨ (0 > ~#res))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_25) ∧ (#delta_25 ≤ #eps) ∧ (-(#eps) ≤ #delta_26) ∧ (#delta_26 ≤ #eps) ∧ (-(#eps) ≤ #delta_27) ∧ (#delta_27 ≤ #eps) ∧ (-(#eps) ≤ #delta_28) ∧ (#delta_28 ≤ #eps) ∧ (-(#eps) ≤ #delta_29) ∧ (#delta_29 ≤ #eps) ∧ (-(#eps) ≤ #delta_30) ∧ (#delta_30 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (-2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + (#delta_25 * x))) ∧ (#y == (y + (#delta_26 * y))) ∧ (#res == if (((x ^ 2) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x ^ 2) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#fres == if (((x ^ 2) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((((#x ^ 2) * (1 + #delta_28)) * (1 + #delta_27)) + ((1 + #delta_27) * #y))
[info]   else
[info]     ((#x / #y) * (1 + #delta_29))
[info] else
[info]   ((#x / #y) * (1 + #delta_30))) ∧ ((#fres > 4) ∨ (0 > #fres)))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y))
[info] post: ((~#res ≤ 4) ∧ (0 ≤ ~#res))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (#fres === iff (((x * x) ≤ 0))
[info]   iff ((y ≤ 5.4))
[info]     ((#x ⊗ #x) ⊕ #y)
[info]   elsse
[info]     (#x ⊘ #y)
[info] elsse
[info]   (#x ⊘ #y))))
[info] post: ((~#res ≤ 4) ∧ (0 ≤ ~#res))
[info] body after approx: ((#res == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (-4.656761167152955e-11 ≤ #fres) ∧ (#fres ≤ 5.40000000004363) ∧ noise(#res, 1.432187703067743e-15))
[info] 
[info] approx: List((x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == if (((x * x) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x * x) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (-4.656761167152955e-11 ≤ #fres) ∧ (#fres ≤ 5.40000000004363) ∧ noise(#res, 1.432187703067743e-15) ∧ ((~#res > 4) ∨ (0 > ~#res))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_37) ∧ (#delta_37 ≤ #eps) ∧ (-(#eps) ≤ #delta_38) ∧ (#delta_38 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (-2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + (#delta_37 * x))) ∧ (#y == (y + (#delta_38 * y))) ∧ (#res == if (((x ^ 2) ≤ 0))
[info]   if ((y ≤ 5.4))
[info]     ((x ^ 2) + y)
[info]   else
[info]     (x / y)
[info] else
[info]   (x / y)) ∧ (-4.656761167152955e-11 ≤ #fres) ∧ (#fres ≤ 5.40000000004363) ∧ (#fres == (#res + #err_13)) ∧ (-1.432187703067743e-15 ≤ #err_13) ∧ (#err_13 ≤ 1.432187703067743e-15) ∧ ((#fres > 4) ∨ (0 > #fres)))
[info] [ Info  ] ---- Unknown ----
[info] generated spec: Some(Spec([-4.656617948382648e-11, 5.400000000043628],1.432187703067743e-15))
[info] [ Info  ] Verification condition (postcond.) ==== f3 ====
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   if ((x ≤ 1.2))
[info]     (2 * x)
[info]   else
[info]     (1.5 * x))
[info] post: ((#res ≤ 10) ∧ noise(#res, 0.0001))
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   if ((x ≤ 1.2))
[info]     (2 * x)
[info]   else
[info]     (1.5 * x))
[info] post: ((#res ≤ 10) ∧ noise(#res, 0.0001))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: Path(true,((#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   if ((x ≤ 1.2))
[info]     (2 * x)
[info]   else
[info]     (1.5 * x)) ∧ (#fres === iff ((x ≤ 0.2))
[info]   #x
[info] elsse
[info]   iff ((x ≤ 1.2))
[info]     (2 ⊗ #x)
[info]   elsse
[info]     (1.5 ⊗ #x))))
[info] post: ((#res ≤ 10) ∧ noise(#res, 0.0001))
[info] 
[info] approx: List((x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05) ∧ (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   if ((x ≤ 1.2))
[info]     (2 * x)
[info]   else
[info]     (1.5 * x)) ∧ (#fres === iff ((x ≤ 0.2))
[info]   #x
[info] elsse
[info]   iff ((x ≤ 1.2))
[info]     (2 ⊗ #x)
[info]   elsse
[info]     (1.5 ⊗ #x)) ∧ ((#res > 10) ∨ ¬(noise(#res, 0.0001)))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_41) ∧ (#delta_41 ≤ #eps) ∧ (-(#eps) ≤ #delta_42) ∧ (#delta_42 ≤ #eps) ∧ (-(#eps) ≤ #delta_43) ∧ (#delta_43 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (0 < x) ∧ (x < 5) ∧ (#x == (x + #err_14)) ∧ (-1.000000000000000e-05 ≤ #err_14) ∧ (#err_14 ≤ 1.000000000000000e-05) ∧ (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   if ((x ≤ 1.2))
[info]     (2 * x)
[info]   else
[info]     (x * 1.5)) ∧ (#fres == if ((x ≤ 0.2))
[info]   #x
[info] else
[info]   if ((x ≤ 1.2))
[info]     ((#x * (1 + #delta_41)) * 2)
[info]   else
[info]     (((#x * (1 + #delta_43)) * 1.5) * (1 + #delta_42))) ∧ ((#res > 10) ∨ ¬(((#fres == (#res + #err_15)) ∧ (-0.0001 ≤ #err_15) ∧ (#err_15 ≤ 0.0001)))))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   if ((x ≤ 1.2))
[info]     (2 * x)
[info]   else
[info]     (1.5 * x))
[info] post: ((#res ≤ 10) ∧ noise(#res, 0.0001))
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05))
[info] body: Path(true,((#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   if ((x ≤ 1.2))
[info]     (2 * x)
[info]   else
[info]     (1.5 * x)) ∧ (#fres === iff ((x ≤ 0.2))
[info]   #x
[info] elsse
[info]   iff ((x ≤ 1.2))
[info]     (2 ⊗ #x)
[info]   elsse
[info]     (1.5 ⊗ #x))))
[info] post: ((#res ≤ 10) ∧ noise(#res, 0.0001))
[info] body after approx: ((#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   if ((x ≤ 1.2))
[info]     (2 * x)
[info]   else
[info]     (1.5 * x)) ∧ (-2.000000000004441e-05 ≤ #fres) ∧ (#fres ≤ 5.00002) ∧ noise(#res, 2.000000000004441e-05))
[info] 
[info] approx: List((x ∈ [0,5] ∧ noise(x, 1.000000000000000e-05) ∧ (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   if ((x ≤ 1.2))
[info]     (2 * x)
[info]   else
[info]     (1.5 * x)) ∧ (-2.000000000004441e-05 ≤ #fres) ∧ (#fres ≤ 5.00002) ∧ noise(#res, 2.000000000004441e-05) ∧ ((#res > 10) ∨ ¬(noise(#res, 0.0001)))))
[info] 
[info]  z3constraint (0): ((0 < x) ∧ (x < 5) ∧ (#x == (x + #err_16)) ∧ (-1.000000000000000e-05 ≤ #err_16) ∧ (#err_16 ≤ 1.000000000000000e-05) ∧ (#res == if ((x ≤ 0.2))
[info]   x
[info] else
[info]   if ((x ≤ 1.2))
[info]     (2 * x)
[info]   else
[info]     (x * 1.5)) ∧ (-2.000000000004441e-05 ≤ #fres) ∧ (#fres ≤ 5.00002) ∧ (#fres == (#res + #err_17)) ∧ (-2.000000000004441e-05 ≤ #err_17) ∧ (#err_17 ≤ 2.000000000004441e-05) ∧ ((#res > 10) ∨ ¬(((#fres == (#res + #err_17)) ∧ (-0.0001 ≤ #err_17) ∧ (#err_17 ≤ 0.0001)))))
[info] [ Info  ] ==== VALID ====
[info] generated spec: Some(Spec([0.000000000000000, 5.000000000000000],2.000000000004441e-05))
[info] [ Info  ] Generated program with 66 lines.
[info] [ Info  ] . ┌─────────┐
[info]           ╔═╡ Summary ╞═══════════════════════════════════════════════════════════════════════╗
[info]           ║ └─────────┘                                                                       ║
[info]           ║ f1                        postcond.           valid                         0.080 ║
[info]           ║ f2                        postcond.           valid                         0.093 ║
[info]           ║ f3                        postcond.           valid                         0.074 ║
[info]           ║ f4                        postcond.           unknown                       1.214 ║
[info]           ║ f5                        postcond.           valid                         1.805 ║
[info]           ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[info]           ║ total: 5      valid: 4      invalid: 0      unknown 1                       3.266 ║
[info]           ║ precision: leon.real.package$Float64$@556eaccc                                                             ║
[info]           ╚═══════════════════════════════════════════════════════════════════════════════════╝
[success] Total time: 7 s, completed Sep 5, 2013 5:43:16 PM
> 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

FunctionCalls

[info] Compiling 1 Scala source to /home/edarulov/repos/leon/target/scala-2.10/classes...
[info] Running leon.Main --real testcases/real-testcases/unit-tests/FunctionCall.scala
[info] [ Info  ] Running Compilation phase
[info] options: simulation: false,
[info] z3 timeout: 1000,
[info] precision: List(leon.real.package$Float64$@6c529bb0),
[info] z3Only: false,
[info] pathSensitive: false
[info] [ Info  ] Analysing fnc:  functionCall
[info] mult((x * x), (y * y))
[info] parameters: Map(x -> x = #x (-2.2, 2.3) +/-  -- , y -> y = #y (3.5, 7.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] [ Info  ] Analysing fnc:  quad
[info] (a * a)
[info] parameters: Map(a -> a = #a (2, 3) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (a ∈ [2,3] ∧ rndoof(a))
[info] [ Info  ] Analysing fnc:  mult
[info] (x * y)
[info] parameters: Map(x -> x = #x (-2.2, 2.3) +/-  -- , y -> y = #y (3.5, 7.5) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] [ Info  ] Analysing fnc:  f1
[info] (let (z := if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) in
[info]   if ((z > 3))
[info]     quad(z)
[info]   else
[info]     quad(2))
[info] parameters: Map(x -> x = #x (3, 4) +/-  -- , #res -> #res = #fres ( -- ,  -- ) +/-  -- )
[info] prec. is complete, continuing
[info] precondition: (x ∈ [3,4] ∧ rndoof(x))
[info] [ Info  ] ******** precision: leon.real.package$Float64$@6c529bb0 *************
[info] [ Info  ] Verification condition (precond.) ==== f1 ====
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ ¬((z > 3)))
[info] post: 2 ∈ [2,3]
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ ¬((z > 3)))
[info] post: 2 ∈ [2,3]
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: Path(true,((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ ¬((z > 3)) ∧ (#z === iff ((x < 3.5))
[info]   (2 ⊗ #x)
[info] elsse
[info]   (3 ⊗ #x)) ∧ ¬((z > 3))))
[info] post: 2 ∈ [2,3]
[info] 
[info] approx: List((x ∈ [3,4] ∧ rndoof(x) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ ¬((z > 3)) ∧ (#z === iff ((x < 3.5))
[info]   (2 ⊗ #x)
[info] elsse
[info]   (3 ⊗ #x)) ∧ ¬((z > 3)) ∧ ¬(2 ∈ [2,3])))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_1) ∧ (#delta_1 ≤ #eps) ∧ (-(#eps) ≤ #delta_2) ∧ (#delta_2 ≤ #eps) ∧ (-(#eps) ≤ #delta_3) ∧ (#delta_3 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (3 < x) ∧ (x < 4) ∧ (#x == (x + (x * #delta_1))) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (x * 3)) ∧ ¬((z > 3)) ∧ (#z == if ((x < 3.5))
[info]   ((#x * 2) * (1 + #delta_2))
[info] else
[info]   ((#x * (1 + #delta_3)) * 3)) ∧ ¬((z > 3)) ∧ ¬(((2 < 2) ∧ (2 < 3))))
[info] [Warning] Not sane! ((-(#eps) ≤ #delta_4) ∧ (#delta_4 ≤ #eps) ∧ (-(#eps) ≤ #delta_5) ∧ (#delta_5 ≤ #eps) ∧ (-(#eps) ≤ #delta_6) ∧ (#delta_6 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (3 < x) ∧ (x < 4) ∧ (#x == ((1 + #delta_4) * x)) ∧ (z == if ((x < 3.5))
[info]             (2 * x)
[info]           else
[info]             (3 * x)) ∧ ¬((z > 3)) ∧ (#z == if ((x < 3.5))
[info]             ((2 * #x) * (1 + #delta_5))
[info]           else
[info]             ((3 * #x) * (1 + #delta_6))) ∧ ¬((z > 3)))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ ¬((z > 3)))
[info] post: 2 ∈ [2,3]
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: Path(true,((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ ¬((z > 3)) ∧ (#z === iff ((x < 3.5))
[info]   (2 ⊗ #x)
[info] elsse
[info]   (3 ⊗ #x)) ∧ ¬((z > 3))))
[info] post: 2 ∈ [2,3]
[info] body after approx: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ ¬((z > 3)) ∧ (5.999999999999997 ≤ #z) ∧ (#z ≤ 10.5) ∧ noise(z, 2.498001808935045e-15) ∧ ¬((z > 3)))
[info] 
[info] approx: List((x ∈ [3,4] ∧ rndoof(x) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ ¬((z > 3)) ∧ (5.999999999999997 ≤ #z) ∧ (#z ≤ 10.5) ∧ noise(z, 2.498001808935045e-15) ∧ ¬((z > 3)) ∧ ¬(2 ∈ [2,3])))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_7) ∧ (#delta_7 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (3 < x) ∧ (x < 4) ∧ (#x == (x + (x * #delta_7))) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (x * 3)) ∧ ¬((z > 3)) ∧ (5.999999999999997 ≤ #z) ∧ (#z ≤ 10.5) ∧ (#z == (z + #err_1)) ∧ (-2.498001808935045e-15 ≤ #err_1) ∧ (#err_1 ≤ 2.498001808935045e-15) ∧ ¬((z > 3)) ∧ ¬(((2 < 2) ∧ (2 < 3))))
[info] [Warning] Not sane! ((-(#eps) ≤ #delta_8) ∧ (#delta_8 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (3 < x) ∧ (x < 4) ∧ (#x == ((1 + #delta_8) * x)) ∧ (z == if ((x < 3.5))
[info]             (2 * x)
[info]           else
[info]             (3 * x)) ∧ ¬((z > 3)) ∧ (5.999999999999997 ≤ #z) ∧ (#z ≤ 10.5) ∧ (#z == (z + #err_1)) ∧ (-2.498001808935045e-15 ≤ #err_1) ∧ (#err_1 ≤ 2.498001808935045e-15) ∧ ¬((z > 3)))
[info] [ Info  ] ---- Unknown ----
[info] generated spec: None
[info] [ Info  ] Verification condition (precond.) ==== f1 ====
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (z > 3))
[info] post: z ∈ [2,3]
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (z > 3))
[info] post: z ∈ [2,3]
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: Path(true,((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (z > 3) ∧ (#z === iff ((x < 3.5))
[info]   (2 ⊗ #x)
[info] elsse
[info]   (3 ⊗ #x)) ∧ (z > 3)))
[info] post: z ∈ [2,3]
[info] 
[info] approx: List((x ∈ [3,4] ∧ rndoof(x) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (z > 3) ∧ (#z === iff ((x < 3.5))
[info]   (2 ⊗ #x)
[info] elsse
[info]   (3 ⊗ #x)) ∧ (z > 3) ∧ ¬(z ∈ [2,3])))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_9) ∧ (#delta_9 ≤ #eps) ∧ (-(#eps) ≤ #delta_10) ∧ (#delta_10 ≤ #eps) ∧ (-(#eps) ≤ #delta_11) ∧ (#delta_11 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (3 < x) ∧ (x < 4) ∧ (#x == (x + (#delta_9 * x))) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (x * 3)) ∧ (z > 3) ∧ (#z == if ((x < 3.5))
[info]   ((#x * 2) * (1 + #delta_10))
[info] else
[info]   (((1 + #delta_11) * #x) * 3)) ∧ (z > 3) ∧ ¬(((2 < z) ∧ (z < 3))))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (z > 3))
[info] post: z ∈ [2,3]
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: Path(true,((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (z > 3) ∧ (#z === iff ((x < 3.5))
[info]   (2 ⊗ #x)
[info] elsse
[info]   (3 ⊗ #x)) ∧ (z > 3)))
[info] post: z ∈ [2,3]
[info] body after approx: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (z > 3) ∧ (5.999999999999997 ≤ #z) ∧ (#z ≤ 10.5) ∧ noise(z, 2.498001808935045e-15) ∧ (z > 3))
[info] 
[info] approx: List((x ∈ [3,4] ∧ rndoof(x) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (z > 3) ∧ (5.999999999999997 ≤ #z) ∧ (#z ≤ 10.5) ∧ noise(z, 2.498001808935045e-15) ∧ (z > 3) ∧ ¬(z ∈ [2,3])))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_15) ∧ (#delta_15 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (3 < x) ∧ (x < 4) ∧ (#x == (x + (x * #delta_15))) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (x * 3)) ∧ (z > 3) ∧ (5.999999999999997 ≤ #z) ∧ (#z ≤ 10.5) ∧ (#z == (z + #err_2)) ∧ (-2.498001808935045e-15 ≤ #err_2) ∧ (#err_2 ≤ 2.498001808935045e-15) ∧ (z > 3) ∧ ¬(((2 < z) ∧ (z < 3))))
[info] [ Info  ] ---- Unknown ----
[info] generated spec: None
[info] [ Info  ] Verification condition (postcond.) ==== mult ====
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (x * y))
[info] post: true
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == (x * y))
[info] post: true
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == (x * y)) ∧ (#fres === (#x ⊗ #y))))
[info] post: true
[info] 
[info] approx: List((x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == (x * y)) ∧ (#fres === (#x ⊗ #y)) ∧ false))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_17) ∧ (#delta_17 ≤ #eps) ∧ (-(#eps) ≤ #delta_18) ∧ (#delta_18 ≤ #eps) ∧ (-(#eps) ≤ #delta_19) ∧ (#delta_19 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (-2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + (#delta_17 * x))) ∧ (#y == (y + (y * #delta_18))) ∧ (#res == (y * x)) ∧ (#fres == ((#x * (1 + #delta_19)) * #y)) ∧ false)
[info] [ Info  ] ==== VALID ====
[info] generated spec: None
[info] [ Info  ] Verification condition (postcond.) ==== quad ====
[info] pre: (a ∈ [2,3] ∧ rndoof(a))
[info] body: (#res == (a * a))
[info] post: ((#res ≤ 10) ∧ (#res ≥ -1) ∧ noise(#res, 1.000000000000000e-06))
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (a ∈ [2,3] ∧ rndoof(a))
[info] body: (#res == (a * a))
[info] post: ((#res ≤ 10) ∧ (#res ≥ -1) ∧ noise(#res, 1.000000000000000e-06))
[info] 
[info] after PATH handling:
[info] pre: (a ∈ [2,3] ∧ rndoof(a))
[info] body: Path(true,((#res == (a * a)) ∧ (#fres === (#a ⊗ #a))))
[info] post: ((#res ≤ 10) ∧ (#res ≥ -1) ∧ noise(#res, 1.000000000000000e-06))
[info] 
[info] approx: List((a ∈ [2,3] ∧ rndoof(a) ∧ (#res == (a * a)) ∧ (#fres === (#a ⊗ #a)) ∧ ((#res > 10) ∨ (#res < -1) ∨ ¬(noise(#res, 1.000000000000000e-06)))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_23) ∧ (#delta_23 ≤ #eps) ∧ (-(#eps) ≤ #delta_24) ∧ (#delta_24 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (2 < a) ∧ (a < 3) ∧ (#a == (a + (#delta_23 * a))) ∧ (#res == (a ^ 2)) ∧ (#fres == ((1 + #delta_24) * (#a ^ 2))) ∧ ((#res > 10) ∨ (#res < -1) ∨ ¬(((#fres == (#res + #err_3)) ∧ (-1.000000000000000e-06 ≤ #err_3) ∧ (#err_3 ≤ 1.000000000000000e-06)))))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (a ∈ [2,3] ∧ rndoof(a))
[info] body: (#res == (a * a))
[info] post: ((#res ≤ 10) ∧ (#res ≥ -1) ∧ noise(#res, 1.000000000000000e-06))
[info] 
[info] after PATH handling:
[info] pre: (a ∈ [2,3] ∧ rndoof(a))
[info] body: Path(true,((#res == (a * a)) ∧ (#fres === (#a ⊗ #a))))
[info] post: ((#res ≤ 10) ∧ (#res ≥ -1) ∧ noise(#res, 1.000000000000000e-06))
[info] body after approx: ((#res == (a * a)) ∧ (3.999999999999997 ≤ #fres) ∧ (#fres ≤ 9.000000000000004) ∧ noise(#res, 2.997602166953212e-15))
[info] 
[info] approx: List((a ∈ [2,3] ∧ rndoof(a) ∧ (#res == (a * a)) ∧ (3.999999999999997 ≤ #fres) ∧ (#fres ≤ 9.000000000000004) ∧ noise(#res, 2.997602166953212e-15) ∧ ((#res > 10) ∨ (#res < -1) ∨ ¬(noise(#res, 1.000000000000000e-06)))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_27) ∧ (#delta_27 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (2 < a) ∧ (a < 3) ∧ (#a == (a + (a * #delta_27))) ∧ (#res == (a ^ 2)) ∧ (3.999999999999997 ≤ #fres) ∧ (#fres ≤ 9.000000000000004) ∧ (#fres == (#res + #err_4)) ∧ (-2.997602166953212e-15 ≤ #err_4) ∧ (#err_4 ≤ 2.997602166953212e-15) ∧ ((#res > 10) ∨ (#res < -1) ∨ ¬(((#fres == (#res + #err_4)) ∧ (-1.000000000000000e-06 ≤ #err_4) ∧ (#err_4 ≤ 1.000000000000000e-06)))))
[info] [ Info  ] ==== VALID ====
[info] generated spec: Some(Spec([4.000000000000000, 9.000000000000000],2.997602166953212e-15))
[info] [ Info  ] Verification condition (precond.) ==== functionCall ====
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: true
[info] post: ((x * x) ∈ [-2.2,2.3] ∧ (y * y) ∈ [3.5,7.5])
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: true
[info] post: ((x * x) ∈ [-2.2,2.3] ∧ (y * y) ∈ [3.5,7.5])
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,true)
[info] post: ((x * x) ∈ [-2.2,2.3] ∧ (y * y) ∈ [3.5,7.5])
[info] 
[info] approx: List((x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y) ∧ (¬((x * x) ∈ [-2.2,2.3]) ∨ ¬((y * y) ∈ [3.5,7.5]))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_29) ∧ (#delta_29 ≤ #eps) ∧ (-(#eps) ≤ #delta_30) ∧ (#delta_30 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (-2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + (#delta_29 * x))) ∧ (#y == (y + (y * #delta_30))) ∧ (¬(((-2.2 < (x ^ 2)) ∧ ((x ^ 2) < 2.3))) ∨ ¬(((3.5 < (y ^ 2)) ∧ ((y ^ 2) < 7.5)))))
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: true
[info] post: ((x * x) ∈ [-2.2,2.3] ∧ (y * y) ∈ [3.5,7.5])
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,true)
[info] post: ((x * x) ∈ [-2.2,2.3] ∧ (y * y) ∈ [3.5,7.5])
[info] body after approx: true
[info] 
[info] approx: List((x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y) ∧ (¬((x * x) ∈ [-2.2,2.3]) ∨ ¬((y * y) ∈ [3.5,7.5]))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_33) ∧ (#delta_33 ≤ #eps) ∧ (-(#eps) ≤ #delta_34) ∧ (#delta_34 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (-2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + (x * #delta_33))) ∧ (#y == (y + (y * #delta_34))) ∧ (¬(((-2.2 < (x ^ 2)) ∧ ((x ^ 2) < 2.3))) ∨ ¬(((3.5 < (y ^ 2)) ∧ ((y ^ 2) < 7.5)))))
[info] [ Info  ] ---- Unknown ----
[info] generated spec: None
[info] [ Info  ] Verification condition (postcond.) ==== f1 ====
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (#res == if ((z > 3))
[info]   quad(z)
[info] else
[info]   quad(2)))
[info] post: (#res ≤ 10)
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (#res == if ((z > 3))
[info]   quad(z)
[info] else
[info]   quad(2)))
[info] post: (#res ≤ 10)
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: Path(true,((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (#res == if ((z > 3))
[info]   quad(z)
[info] else
[info]   quad(2)) ∧ (#z === iff ((x < 3.5))
[info]   (2 ⊗ #x)
[info] elsse
[info]   (3 ⊗ #x)) ∧ (#fres === iff ((z > 3))
[info]   quad_f(#z)
[info] elsse
[info]   quad_f(2))))
[info] post: (#res ≤ 10)
[info] 
[info] approx: List((x ∈ [3,4] ∧ rndoof(x) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (#res == if ((z > 3))
[info]   quad(z)
[info] else
[info]   quad(2)) ∧ (#z === iff ((x < 3.5))
[info]   (2 ⊗ #x)
[info] elsse
[info]   (3 ⊗ #x)) ∧ (#fres === iff ((z > 3))
[info]   quad_f(#z)
[info] elsse
[info]   quad_f(2)) ∧ (#res > 10)))
[info] arg: #z  type: Real   class leon.purescala.Trees$Variable
[info] arg: 2  type: Real   class leon.real.Trees$RealLiteral
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_37) ∧ (#delta_37 ≤ #eps) ∧ (-(#eps) ≤ #delta_38) ∧ (#delta_38 ≤ #eps) ∧ (-(#eps) ≤ #delta_39) ∧ (#delta_39 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (3 < x) ∧ (x < 4) ∧ (#x == (x + (#delta_37 * x))) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (x * 3)) ∧ (#res == if ((z > 3))
[info]   quad(z)
[info] else
[info]   quad(2)) ∧ (#z == if ((x < 3.5))
[info]   ((#x * 2) * (1 + #delta_38))
[info] else
[info]   ((#x * (1 + #delta_39)) * 3)) ∧ (#fres == if ((z > 3))
[info]   quad(#z)
[info] else
[info]   quad(2)) ∧ (#res > 10))
[info] arg: #z  type: Real   class leon.purescala.Trees$Variable
[info] arg: 2  type: Real   class leon.real.Trees$RealLiteral
[info] [ Info  ] Sanity check failed! 
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] fnc body before: (a * a)
[info] newBody: (z * z)
[info] fnc body before: (a * a)
[info] newBody: (2 * 2)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (#res == if ((z > 3))
[info]   fnc_quad((z * z))
[info] else
[info]   fnc_quad((2 * 2))))
[info] post: (#res ≤ 10)
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [3,4] ∧ rndoof(x))
[info] body: Path(true,((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (#res == if ((z > 3))
[info]   fnc_quad((z * z))
[info] else
[info]   fnc_quad((2 * 2))) ∧ (#z === iff ((x < 3.5))
[info]   (2 ⊗ #x)
[info] elsse
[info]   (3 ⊗ #x)) ∧ (#fres === iff ((z > 3))
[info]   fnc_quad_f((#z ⊗ #z))
[info] elsse
[info]   fnc_quad_f((2 ⊗ 2)))))
[info] post: (#res ≤ 10)
[info] body after approx: ((z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (#res == if ((z > 3))
[info]   fnc_quad((z * z))
[info] else
[info]   fnc_quad((2 * 2))) ∧ (5.999999999999997 ≤ #z) ∧ (#z ≤ 10.5) ∧ noise(z, 2.498001808935045e-15) ∧ (3.999999999999935 ≤ #fres) ∧ (#fres ≤ 110.2500000000001) ∧ noise(#res, 6.469824728868668e-14))
[info] 
[info] approx: List((x ∈ [3,4] ∧ rndoof(x) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (3 * x)) ∧ (#res == if ((z > 3))
[info]   fnc_quad((z * z))
[info] else
[info]   fnc_quad((2 * 2))) ∧ (5.999999999999997 ≤ #z) ∧ (#z ≤ 10.5) ∧ noise(z, 2.498001808935045e-15) ∧ (3.999999999999935 ≤ #fres) ∧ (#fres ≤ 110.2500000000001) ∧ noise(#res, 6.469824728868668e-14) ∧ (#res > 10)))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_43) ∧ (#delta_43 ≤ #eps) ∧ (#quad_call_1 == (z ^ 2)) ∧ (#quad_call_2 == (2 ^ 2)) ∧ (#eps == 1.110223024625157e-16) ∧ (3 < x) ∧ (x < 4) ∧ (#x == (x + (#delta_43 * x))) ∧ (z == if ((x < 3.5))
[info]   (2 * x)
[info] else
[info]   (x * 3)) ∧ (#res == if ((z > 3))
[info]   #quad_call_1
[info] else
[info]   #quad_call_2) ∧ (5.999999999999997 ≤ #z) ∧ (#z ≤ 10.5) ∧ (#z == (z + #err_5)) ∧ (-2.498001808935045e-15 ≤ #err_5) ∧ (#err_5 ≤ 2.498001808935045e-15) ∧ (3.999999999999935 ≤ #fres) ∧ (#fres ≤ 110.2500000000001) ∧ (#fres == (#res + #err_6)) ∧ (-6.469824728868668e-14 ≤ #err_6) ∧ (#err_6 ≤ 6.469824728868668e-14) ∧ (#res > 10))
[info] [ Info  ] ---- Unknown ----
[info] generated spec: Some(Spec([4.000000000000000, 110.2500000000000],6.469824728868668e-14))
[info] [ Info  ] Verification condition (postcond.) ==== functionCall ====
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == mult((x * x), (y * y)))
[info] post: noise(#res, 1.000000000000000e-07)
[info] [ Info  ] Trying with approximation
[info] [ Info  ]   - ApproxKind(Uninterpreted,Merging,Z3Only)
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == mult((x * x), (y * y)))
[info] post: noise(#res, 1.000000000000000e-07)
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == mult((x * x), (y * y))) ∧ (#fres === mult_f((#x ⊗ #x), (#y ⊗ #y)))))
[info] post: noise(#res, 1.000000000000000e-07)
[info] 
[info] approx: List((x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == mult((x * x), (y * y))) ∧ (#fres === mult_f((#x ⊗ #x), (#y ⊗ #y))) ∧ ¬(noise(#res, 1.000000000000000e-07))))
[info] arg: ((#x * #x) * (1 + #delta_47))  type: Real   class leon.real.Trees$TimesR
[info] arg: ((#y * #y) * (1 + #delta_48))  type: Real   class leon.real.Trees$TimesR
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_45) ∧ (#delta_45 ≤ #eps) ∧ (-(#eps) ≤ #delta_46) ∧ (#delta_46 ≤ #eps) ∧ (-(#eps) ≤ #delta_47) ∧ (#delta_47 ≤ #eps) ∧ (-(#eps) ≤ #delta_48) ∧ (#delta_48 ≤ #eps) ∧ (-(#eps) ≤ #delta_49) ∧ (#delta_49 ≤ #eps) ∧ (-(#eps) ≤ #delta_50) ∧ (#delta_50 ≤ #eps) ∧ (#eps == 1.110223024625157e-16) ∧ (-2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + (x * #delta_45))) ∧ (#y == (y + (y * #delta_46))) ∧ (#res == mult((x ^ 2), (y ^ 2))) ∧ (#fres == mult(((#x ^ 2) * (1 + #delta_49)), ((1 + #delta_50) * (#y ^ 2)))) ∧ ¬(((#fres == (#res + #err_7)) ∧ (-1.000000000000000e-07 ≤ #err_7) ∧ (#err_7 ≤ 1.000000000000000e-07))))
[info] arg: ((#x * #x) * (1 + #delta_53))  type: Real   class leon.real.Trees$TimesR
[info] arg: ((#y * #y) * (1 + #delta_54))  type: Real   class leon.real.Trees$TimesR
[info] [ Info  ] Sanity check failed! 
[info] [ Info  ] ---- Unknown ----
[info] [ Info  ]   - ApproxKind(Inlining,Merging,JustFloat)
[info] fnc body before: (x * y)
[info] newBody: ((x * x) * (y * y))
[info] 
[info] after FNC handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: (#res == fnc_mult(((x * x) * (y * y))))
[info] post: noise(#res, 1.000000000000000e-07)
[info] 
[info] after PATH handling:
[info] pre: (x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y))
[info] body: Path(true,((#res == fnc_mult(((x * x) * (y * y)))) ∧ (#fres === fnc_mult_f(((#x ⊗ #x) ⊗ (#y ⊗ #y))))))
[info] post: noise(#res, 1.000000000000000e-07)
[info] body after approx: ((#res == fnc_mult(((x * x) * (y * y)))) ∧ (-1.496246870783433e-11 ≤ #fres) ∧ (#fres ≤ 297.5625000000002) ∧ noise(#res, 2.312525184369706e-13))
[info] 
[info] approx: List((x ∈ [-2.2,2.3] ∧ y ∈ [3.5,7.5] ∧ rndoof(x) ∧ rndoof(y) ∧ (#res == fnc_mult(((x * x) * (y * y)))) ∧ (-1.496246870783433e-11 ≤ #fres) ∧ (#fres ≤ 297.5625000000002) ∧ noise(#res, 2.312525184369706e-13) ∧ ¬(noise(#res, 1.000000000000000e-07))))
[info] 
[info]  z3constraint (0): ((-(#eps) ≤ #delta_57) ∧ (#delta_57 ≤ #eps) ∧ (-(#eps) ≤ #delta_58) ∧ (#delta_58 ≤ #eps) ∧ (#mult_call_5 == ((y ^ 2) * (x ^ 2))) ∧ (#eps == 1.110223024625157e-16) ∧ (-2.2 < x) ∧ (x < 2.3) ∧ (3.5 < y) ∧ (y < 7.5) ∧ (#x == (x + (x * #delta_57))) ∧ (#y == (y + (#delta_58 * y))) ∧ (#res == #mult_call_5) ∧ (-1.496246870783433e-11 ≤ #fres) ∧ (#fres ≤ 297.5625000000002) ∧ (#fres == (#res + #err_8)) ∧ (-2.312525184369706e-13 ≤ #err_8) ∧ (#err_8 ≤ 2.312525184369706e-13) ∧ ¬(((#fres == (#res + #err_8)) ∧ (-1.000000000000000e-07 ≤ #err_8) ∧ (#err_8 ≤ 1.000000000000000e-07))))
[info] [ Info  ] ==== VALID ====
[info] generated spec: Some(Spec([-1.473121618939736e-11, 297.5624999999999],2.312525184369706e-13))
[info] [ Info  ] Generated program with 72 lines.
[info] [ Info  ] . ┌─────────┐
[info]           ╔═╡ Summary ╞═══════════════════════════════════════════════════════════════════════╗
[info]           ║ └─────────┘                                                                       ║
[info]           ║ f1                        precond.            unknown                       0.325 ║
[info]           ║ f1                        precond.            unknown                       0.131 ║
[info]           ║ f1                        postcond.           unknown                       0.180 ║
[info]           ║ functionCall              precond.            unknown                       0.038 ║
[info]           ║ functionCall              postcond.           valid                         0.348 ║
[info]           ║ mult                      postcond.           valid                         0.017 ║
[info]           ║ quad                      postcond.           valid                         0.078 ║
[info]           ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[info]           ║ total: 7      valid: 3      invalid: 0      unknown 4                       1.117 ║
[info]           ║ precision: leon.real.package$Float64$@6c529bb0                                                             ║
[info]           ╚═══════════════════════════════════════════════════════════════════════════════════╝
[success] Total time: 5 s, completed Sep 5, 2013 5:46:09 PM
> 
